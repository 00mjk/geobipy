.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_examples_Meshes_topo_rectilinear_mesh_2d.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_Meshes_topo_rectilinear_mesh_2d.py:


Topo Rectilinear Mesh 2D
------------------------


.. code-block:: default



    from geobipy import StatArray
    from geobipy import TopoRectilinearMesh2D
    import matplotlib.pyplot as plt
    import numpy as np








Create input StatArrays for the horizontal and vertical (x and y) mesh axes


.. code-block:: default


    x = StatArray(np.arange(10.0), 'Easting', 'm')
    y = StatArray(np.arange(10.0), 'Height', 'm')







Create a height profile for the mesh


.. code-block:: default


    height = StatArray(np.asarray([5,4,3,2,1,1,2,3,4,5])*3.0, 'Height', 'm')








Instantiate the mesh


.. code-block:: default


    rm = TopoRectilinearMesh2D(xCentres=x, yCentres=y, heightCentres=height)








Plot only the grid lines of the mesh


.. code-block:: default


    plt.figure()
    rm.plotGrid()




.. image:: /examples/Meshes/images/sphx_glr_topo_rectilinear_mesh_2d_001.png
    :class: sphx-glr-single-img




Create an array of random numbers that we can pass to the mesh and perform operations


.. code-block:: default


    values = StatArray(np.random.random(rm.shape), 'Name', 'Units')







Compute the mean over an interval for the mesh.


.. code-block:: default


    rm.intervalStatistic(values, intervals=[6.8, 12.4], axis=0)







Compute the mean over multiple intervals for the mesh.


.. code-block:: default


    rm.intervalStatistic(values, intervals=[6.8, 12.4, 20.0, 40.0], axis=0)









.. code-block:: default



    rm.intervalStatistic(values, intervals=[2.8, 4.2], axis=1)









.. code-block:: default



    rm.intervalStatistic(values, intervals=[2.8, 4.2, 5.1, 8.4], axis=1)









.. code-block:: default



    rm.ravelIndices([[3, 4], [5, 5]])









.. code-block:: default



    rm.unravelIndex([35, 45])









.. code-block:: default



    plt.figure()
    rm.pcolor(values, grid=True, linewidth=0.1, xAxis='x')





.. image:: /examples/Meshes/images/sphx_glr_topo_rectilinear_mesh_2d_002.png
    :class: sphx-glr-single-img




Create a line with three dimensions.


.. code-block:: default


    z = StatArray(np.cumsum(np.arange(10.0)), 'Depth', 'm')









.. code-block:: default



    rm = TopoRectilinearMesh2D(xCentres=x, yCentres=y, zCentres=z, heightCentres=height)
    values = StatArray(np.arange(rm.nCells, dtype=np.float).reshape(rm.shape), 'Name', 'Units')









.. code-block:: default



    plt.figure()
    rm.plotGrid(linewidth=1)




.. image:: /examples/Meshes/images/sphx_glr_topo_rectilinear_mesh_2d_003.png
    :class: sphx-glr-single-img




The pcolor function can now be plotted against distance


.. code-block:: default


    plt.figure()
    rm.pcolor(values, grid=True, xAxis='r')




.. image:: /examples/Meshes/images/sphx_glr_topo_rectilinear_mesh_2d_004.png
    :class: sphx-glr-single-img




And we can plot the x-y co-ordinates


.. code-block:: default


    plt.figure()
    rm.plotXY()





.. image:: /examples/Meshes/images/sphx_glr_topo_rectilinear_mesh_2d_005.png
    :class: sphx-glr-single-img





.. code-block:: default


    # x = StatArray(np.arange(3.0), 'Easting', 'm')
    # y = StatArray(np.arange(3.0), 'Northing', 'm')
    # z = StatArray(np.cumsum(np.arange(4.0)), 'Depth', 'm')
    # height = StatArray(np.asarray([1,2,3])*10.0, 'Height', 'm')









.. code-block:: default



    # rm = TopoRectilinearMesh2D(xCentres=x, yCentres=y, zCentres=z, heightCentres=height)









.. code-block:: default



    rm.toVTK('test', cellData=values)







.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.435 seconds)


.. _sphx_glr_download_examples_Meshes_topo_rectilinear_mesh_2d.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: topo_rectilinear_mesh_2d.py <topo_rectilinear_mesh_2d.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: topo_rectilinear_mesh_2d.ipynb <topo_rectilinear_mesh_2d.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
