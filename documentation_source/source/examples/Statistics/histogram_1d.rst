.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_examples_Statistics_histogram_1d.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_Statistics_histogram_1d.py:


Histogram 1D
------------

This histogram class allows efficient updating of histograms, plotting and
saving as HDF5


.. code-block:: default


    import h5py
    from geobipy import hdfRead
    from geobipy import StatArray
    from geobipy import Histogram1D
    import numpy as np
    import matplotlib.pyplot as plt







Histogram with regular bins


.. code-block:: default


    x = np.random.randn(1000)
    bins = StatArray(np.linspace(-4,4,101), 'Regular bins')









Set the histogram using the bins, and update


.. code-block:: default


    H = Histogram1D(bins = bins)
    H.update(x)








Plot the histogram


.. code-block:: default


    plt.figure()
    H.plot()





.. image:: /examples/Statistics/images/sphx_glr_histogram_1d_001.png
    :class: sphx-glr-single-img




We can clip additions to the histogram using clip=True. In this case outliers
will land in the outermost bins.


.. code-block:: default


    x = np.full(100, 1000.0)
    H.update(x, trim=True)









.. code-block:: default



    plt.figure()
    H.plot()





.. image:: /examples/Statistics/images/sphx_glr_histogram_1d_002.png
    :class: sphx-glr-single-img




We can write/read the histogram to/from a HDF file


.. code-block:: default


    with h5py.File('Histogram.h5','w') as hf:
        H.toHdf(hf,'Histogram')









.. code-block:: default



    H1 = hdfRead.readKeyFromFiles('Histogram.h5','/','Histogram')









.. code-block:: default



    plt.figure()
    H1.plot()





.. image:: /examples/Statistics/images/sphx_glr_histogram_1d_003.png
    :class: sphx-glr-single-img




Histogram with irregular bins


.. code-block:: default


    x = np.cumsum(np.arange(10))
    irregularBins = np.hstack([-x[::-1], x[1:]])









.. code-block:: default



    edges = StatArray(irregularBins, 'irregular bins')









.. code-block:: default



    H = Histogram1D(bins=edges)









.. code-block:: default



    H.binCentres









.. code-block:: default



    H.bins









.. code-block:: default



    addThese = (np.random.randn(10000)*20.0) - 10.0









.. code-block:: default



    H.update(addThese, trim=False)









.. code-block:: default



    plt.figure()
    H.plot()





.. image:: /examples/Statistics/images/sphx_glr_histogram_1d_004.png
    :class: sphx-glr-single-img





.. code-block:: default



    plt.figure()
    H.pcolor(grid=True)





.. image:: /examples/Statistics/images/sphx_glr_histogram_1d_005.png
    :class: sphx-glr-single-img




Histogram with linear space entries that are logged internally


.. code-block:: default


    positiveBins = StatArray(np.logspace(-5, 3), 'positive bins')









.. code-block:: default



    positiveBins









.. code-block:: default



    H = Histogram1D(bins=positiveBins, log='e')








Generate random 10**x


.. code-block:: default


    addThese = 10.0**(np.random.randn(1000)*2.0)









.. code-block:: default



    H.update(addThese)









.. code-block:: default



    plt.figure()
    H.plot()



.. image:: /examples/Statistics/images/sphx_glr_histogram_1d_006.png
    :class: sphx-glr-single-img





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.652 seconds)


.. _sphx_glr_download_examples_Statistics_histogram_1d.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: histogram_1d.py <histogram_1d.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: histogram_1d.ipynb <histogram_1d.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
