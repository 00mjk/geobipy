.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_examples_Data_data_class.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_Data_data_class.py:


Data Class
----------

The Data class is an extenstion to the [3D Point Cloud](pointCloud3D.ipynb) Class


.. code-block:: default


    # Import EM data class, Set up python
    from geobipy import StatArray
    from geobipy import Data
    import numpy as np
    import matplotlib.pyplot as plt
    from os.path import join


    dataFolder = "..//supplementary//Data//"

    # The data file name
    dataFile = dataFolder + 'Resolve2.txt'







We can read data from an ascii file.  The number of headers is given, and the
columns that you want to read in.

The first three indices are the x, y, z columns.


.. code-block:: default

    D = Data()
    iCols = [2,3,4,6,7,8,9,10,11]
    D.read(dataFile, columnIndex=iCols, nHeaders=1)







We can grab one of the channels as an StatArray


.. code-block:: default

    ch = D.getDataChannel(channel=0)
    ch.summary()





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Name: I_380
         Units: 
         Shape: (71470,)
         Values: [145.3 145.7 146.4 ... 173.8 172.3 170.4]




We can write a summary of the data.


.. code-block:: default

    D.summary()





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    3D Point Cloud: 
    Number of Points: : 71470 
     Name: Easting
         Units: m
         Shape: (71470,)
         Values: [586852.29 586852.23 586852.17 ... 590160.46 590163.5  590166.53]
     Name: Northing
         Units: m
         Shape: (71470,)
         Values: [4639119.38 4639122.68 4639125.98 ... 4640082.67 4640082.8  4640082.93]
     Name: DEM_elev
         Units: m
         Shape: (71470,)
         Values: [1246.84 1246.71 1246.61 ... 1247.36 1247.41 1247.46]
     Name: Elevation
         Units: m
         Shape: (71470,)
         Values: [0. 0. 0. ... 0. 0. 0.]
    Data:          : 
    # of Channels: 6 
    # of Total Data: 428820 
    Name: Data
         Units: 
         Shape: (71470, 6)
         Values: [[145.3 217.9 435.8 412.5 260.6 178.7]
     [145.7 217.2 436.5 410.2 257.9 178.1]
     [146.4 216.3 437.4 407.4 255.8 177.8]
     ...
     [173.8 248.7 511.6 511.1 308.6 233.4]
     [172.3 250.1 513.7 513.8 310.  235.5]
     [170.4 251.7 515.8 516.5 311.3 237.5]]

     Name: Standard Deviation
         Units: 
         Shape: (71470, 6)
         Values: [[1. 1. 1. 1. 1. 1.]
     [1. 1. 1. 1. 1. 1.]
     [1. 1. 1. 1. 1. 1.]
     ...
     [1. 1. 1. 1. 1. 1.]
     [1. 1. 1. 1. 1. 1.]
     [1. 1. 1. 1. 1. 1.]]

     Name: Predicted Data
         Units: 
         Shape: (71470, 6)
         Values: [[0. 0. 0. 0. 0. 0.]
     [0. 0. 0. 0. 0. 0.]
     [0. 0. 0. 0. 0. 0.]
     ...
     [0. 0. 0. 0. 0. 0.]
     [0. 0. 0. 0. 0. 0.]
     [0. 0. 0. 0. 0. 0.]]





Plot one or more channels in the data


.. code-block:: default

    plt.figure()
    x, y = D.plot(channels=[0,3,4], log=10, linewidth=0.5)




.. image:: /examples/Data/images/sphx_glr_data_class_001.png
    :class: sphx-glr-single-img




Or we can make maps out of them!


.. code-block:: default

    plt.figure()
    D.mapData(channel=0)
    plt.axis('equal')




.. image:: /examples/Data/images/sphx_glr_data_class_002.png
    :class: sphx-glr-single-img





.. code-block:: default


    # D.toVTK(fileName='Data')







.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  3.261 seconds)


.. _sphx_glr_download_examples_Data_data_class.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: data_class.py <data_class.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: data_class.ipynb <data_class.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
