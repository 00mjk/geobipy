
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/Datapoints/plot_tempest_datapoint.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_Datapoints_plot_tempest_datapoint.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_Datapoints_plot_tempest_datapoint.py:


Tempest Datapoint Class
-----------------------

.. GENERATED FROM PYTHON SOURCE LINES 7-25

There are three ways in which to create a time domain datapoint

1) :ref:`Instantiating a time domain datapoint`

2) :ref:`Reading a datapoint from a file`

3) :ref:`Obtaining a datapoint from a dataset`

Once instantiated, see :ref:`Using a time domain datapoint`

Credits:
We would like to thank Ross Brodie at Geoscience Australia for his airborne time domain forward modeller
https://github.com/GeoscienceAustralia/ga-aem

For ground-based time domain data, we are using Dieter Werthmuller's python package Empymod
https://empymod.github.io/

Thanks to Dieter for his help getting Empymod ready for incorporation into GeoBIPy

.. GENERATED FROM PYTHON SOURCE LINES 27-45

.. code-block:: default

    from os.path import join
    import numpy as np
    import h5py
    import matplotlib.pyplot as plt
    from geobipy import hdfRead
    from geobipy import Waveform
    from geobipy import SquareLoop, CircularLoop
    from geobipy import butterworth
    from geobipy import TdemSystem
    from geobipy import TempestData
    # from geobipy import TemDataPoint
    from geobipy import Model1D
    from geobipy import StatArray
    from geobipy import Distribution

    dataFolder = "..//supplementary//Data//"
    # dataFolder = "source//examples//supplementary//Data"








.. GENERATED FROM PYTHON SOURCE LINES 46-52

Obtaining a datapoint from a dataset
++++++++++++++++++++++++++++++++++++
More often than not, our observed data is stored in a file on disk.
We can read in a dataset and pull datapoints from it.

For more information about the time domain data set, see :ref:`Time domain dataset`

.. GENERATED FROM PYTHON SOURCE LINES 52-58

.. code-block:: default


    # The data file name
    dataFile = dataFolder + 'Tempest.nc'
    # The EM system file name
    systemFile = dataFolder + 'Tempest.stm'








.. GENERATED FROM PYTHON SOURCE LINES 59-60

Initialize and read an EM data set

.. GENERATED FROM PYTHON SOURCE LINES 60-62

.. code-block:: default

    D = TempestData.read_netcdf(dataFile, systemFile)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Warning: Your data contains values that are <= 0.0




.. GENERATED FROM PYTHON SOURCE LINES 63-64

Get a datapoint from the dataset

.. GENERATED FROM PYTHON SOURCE LINES 64-70

.. code-block:: default

    tdp = D.datapoint(0)

    # plt.figure()
    # tdp.plot()









.. GENERATED FROM PYTHON SOURCE LINES 71-73

Using a time domain datapoint
+++++++++++++++++++++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 75-76

We can define a 1D layered earth model, and use it to predict some data

.. GENERATED FROM PYTHON SOURCE LINES 76-79

.. code-block:: default

    par = StatArray(np.r_[500.0, 20.0], "Conductivity", "$\frac{S}{m}$")
    mod = Model1D(edges=np.r_[0, 75.0, np.inf], parameters=par)








.. GENERATED FROM PYTHON SOURCE LINES 80-81

Forward model the data

.. GENERATED FROM PYTHON SOURCE LINES 81-83

.. code-block:: default

    tdp.forward(mod)








.. GENERATED FROM PYTHON SOURCE LINES 84-93

.. code-block:: default

    plt.figure()
    plt.subplot(121)
    _ = mod.pcolor()
    plt.subplot(122)
    _ = tdp.plot()
    _ = tdp.plotPredicted()
    plt.tight_layout()
    plt.suptitle('Model and response')




.. image:: /examples/Datapoints/images/sphx_glr_plot_tempest_datapoint_001.png
    :alt: Model and response, Time Domain EM Data
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    Text(0.5, 0.98, 'Model and response')



.. GENERATED FROM PYTHON SOURCE LINES 94-98

.. code-block:: default

    plt.figure()
    tdp.plotDataResidual(xscale='log')
    plt.title('data residual')




.. image:: /examples/Datapoints/images/sphx_glr_plot_tempest_datapoint_002.png
    :alt: data residual
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    Text(0.5, 1.0, 'data residual')



.. GENERATED FROM PYTHON SOURCE LINES 99-100

Compute the sensitivity matrix for a given model

.. GENERATED FROM PYTHON SOURCE LINES 100-104

.. code-block:: default

    J = tdp.sensitivity(mod)
    plt.figure()
    _ = np.abs(J).pcolor(equalize=True, log=10, flipY=True)




.. image:: /examples/Datapoints/images/sphx_glr_plot_tempest_datapoint_003.png
    :alt: plot tempest datapoint
    :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 105-109

Attaching statistical descriptors to the datapoint
++++++++++++++++++++++++++++++++++++++++++++++++++

Define a multivariate log normal distribution as the prior on the predicted data.

.. GENERATED FROM PYTHON SOURCE LINES 109-111

.. code-block:: default

    tdp.predictedData.set_prior('MvLogNormal', tdp.data[tdp.active], tdp.std[tdp.active]**2.0)








.. GENERATED FROM PYTHON SOURCE LINES 112-113

This allows us to evaluate the likelihood of the predicted data

.. GENERATED FROM PYTHON SOURCE LINES 113-117

.. code-block:: default

    print(tdp.likelihood(log=True))
    # Or the misfit
    print(tdp.dataMisfit())





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    -139.95785764810176
    14.992644973583651




.. GENERATED FROM PYTHON SOURCE LINES 118-119

We can perform a quick search for the best fitting half space

.. GENERATED FROM PYTHON SOURCE LINES 119-133

.. code-block:: default

    halfspace = tdp.find_best_halfspace()
    print('Best half space conductivity is {} $S/m$'.format(halfspace.par))
    plt.figure()
    _ = tdp.plot()
    _ = tdp.plotPredicted()









    plt.show()


.. image:: /examples/Datapoints/images/sphx_glr_plot_tempest_datapoint_004.png
    :alt: Time Domain EM Data
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Best half space conductivity is [0.17073526] $S/m$





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  6.191 seconds)


.. _sphx_glr_download_examples_Datapoints_plot_tempest_datapoint.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_tempest_datapoint.py <plot_tempest_datapoint.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_tempest_datapoint.ipynb <plot_tempest_datapoint.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
