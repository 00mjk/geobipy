
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/Inference/plot_inference_1d_skytem.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_Inference_plot_inference_1d_skytem.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_Inference_plot_inference_1d_skytem.py:


1D Inference of Skytem Data
---------------------------

All plotting in GeoBIPy can be carried out using the 3D inference class

.. GENERATED FROM PYTHON SOURCE LINES 9-17

.. code-block:: default

    import matplotlib.pyplot as plt
    from geobipy import serial_geobipy
    from geobipy import example_path
    from geobipy import Inference3D
    import numpy as np
    import os
    import shutil








.. GENERATED FROM PYTHON SOURCE LINES 18-22

Running GeoBIPy to invert data
++++++++++++++++++++++++++++++

Define some directories and paths

.. GENERATED FROM PYTHON SOURCE LINES 24-25

The directory where HDF files will be stored

.. GENERATED FROM PYTHON SOURCE LINES 25-26

.. code-block:: default

    output_directory = "..//supplementary//time_domain_inversion//results"







.. GENERATED FROM PYTHON SOURCE LINES 27-36

.. code-block:: default


    for filename in os.listdir(output_directory):
        file_path = os.path.join(output_directory, filename)
        try:
            if os.path.isfile(file_path) or os.path.islink(file_path):
                os.unlink(file_path)
        except Exception as e:
            print('Failed to delete %s. Reason: %s' % (file_path, e))








.. GENERATED FROM PYTHON SOURCE LINES 37-38

The parameter file defines the set of user parameters needed to run geobipy.

.. GENERATED FROM PYTHON SOURCE LINES 38-39

.. code-block:: default

    parameter_file = "skytem_options"







.. GENERATED FROM PYTHON SOURCE LINES 40-45

.. code-block:: default


    # Here are the contents of the user parameter file.
    # with open(parameter_file, 'r') as f:
    #     print(f.read())








.. GENERATED FROM PYTHON SOURCE LINES 46-51

To run geobipy in serial, simply call that function.
Here we specify index 0 to only carry out a shortened inversion of a single
data point for time considerations.
You will notice however that the HDF files are created for multiple lines
inside the data file.

.. GENERATED FROM PYTHON SOURCE LINES 51-54

.. code-block:: default

    serial_geobipy(parameter_file, output_directory, index=0, seed=10)





.. image-sg:: /examples/Inference/images/sphx_glr_plot_inference_1d_skytem_001.png
   :alt: Fiducial [154.], Time Domain EM Data
   :srcset: /examples/Inference/images/sphx_glr_plot_inference_1d_skytem_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Running GeoBIPy in serial mode
    Using user input file skytem_options
    Output files will be produced at ..//supplementary//time_domain_inversion//results
    Creating HDF5 files, this may take a few minutes...
    Files are being created for data files ..//supplementary//data/Skytem_small.csv and system files ['..//supplementary//data/SkytemHM-SLV.stm', '..//supplementary//data/SkytemLM-SLV.stm']
    Created hdf5 file for line 100101 with 100 data points
    i=0, k=2, 0.000 s/Model, 0.012 s Elapsed

    /Users/nfoks/codes/repositories/geobipy/geobipy/src/classes/mesh/RectilinearMesh2D.py:358: RuntimeWarning: invalid value encountered in true_divide
      tmp = np.divide(cs, np.expand_dims(total, 1-axis))
    /Users/nfoks/codes/repositories/geobipy/geobipy/src/classes/mesh/RectilinearMesh2D.py:358: RuntimeWarning: invalid value encountered in true_divide
      tmp = np.divide(cs, np.expand_dims(total, 1-axis))
    i=1000, k=4, 0.010 s/Model, 10.489 s Elapsed

    /Users/nfoks/codes/repositories/geobipy/geobipy/src/classes/mesh/RectilinearMesh2D.py:358: RuntimeWarning: invalid value encountered in true_divide
      tmp = np.divide(cs, np.expand_dims(total, 1-axis))
    /Users/nfoks/codes/repositories/geobipy/geobipy/src/classes/mesh/RectilinearMesh2D.py:358: RuntimeWarning: invalid value encountered in true_divide
      tmp = np.divide(cs, np.expand_dims(total, 1-axis))
    i=2000, k=4, 0.011 s/Model, 21.332 s Elapsed

    /Users/nfoks/codes/repositories/geobipy/geobipy/src/classes/mesh/RectilinearMesh2D.py:358: RuntimeWarning: invalid value encountered in true_divide
      tmp = np.divide(cs, np.expand_dims(total, 1-axis))
    /Users/nfoks/codes/repositories/geobipy/geobipy/src/classes/mesh/RectilinearMesh2D.py:358: RuntimeWarning: invalid value encountered in true_divide
      tmp = np.divide(cs, np.expand_dims(total, 1-axis))
    i=3000, k=4, 0.010 s/Model, 31.690 s Elapsed

    /Users/nfoks/codes/repositories/geobipy/geobipy/src/classes/mesh/RectilinearMesh2D.py:358: RuntimeWarning: invalid value encountered in true_divide
      tmp = np.divide(cs, np.expand_dims(total, 1-axis))
    /Users/nfoks/codes/repositories/geobipy/geobipy/src/classes/mesh/RectilinearMesh2D.py:358: RuntimeWarning: invalid value encountered in true_divide
      tmp = np.divide(cs, np.expand_dims(total, 1-axis))
    i=4000, k=5, 0.011 s/Model, 42.465 s Elapsed

    i=5000, k=6, 0.012 s/Model, 54.031 s Elapsed

    i=6000, k=4, 0.011 s/Model, 65.236 s Elapsed

    i=7000, k=3, 0.011 s/Model, 76.344 s Elapsed

    i=8000, k=5, 0.011 s/Model, 87.423 s Elapsed

    i=9000, k=6, 0.012 s/Model, 99.047 s Elapsed

    i=10000, k=5, 0.011 s/Model, 110.182 s Elapsed

    i=11000, k=5, 0.011 s/Model, 121.222 s Elapsed

    i=12000, k=5, 0.012 s/Model, 132.769 s Elapsed

    i=13000, k=5, 0.011 s/Model, 144.166 s Elapsed

    i=14000, k=4, 0.011 s/Model, 155.256 s Elapsed

    Remaining Points 0/1 || Elapsed Time: 0:02:38.439348 h:m:s || ETA 0:02:38.439348 h:m:s




.. GENERATED FROM PYTHON SOURCE LINES 55-61

Plotting the results for a single data point
++++++++++++++++++++++++++++++++++++++++++++

For the sake of plotting, we refer to a previously completed inversion.
For space considerations we do not include those HDF files in this repository
and simply use them for plotting.

.. GENERATED FROM PYTHON SOURCE LINES 63-65

.. code-block:: default

    results_3d = Inference3D(directory=output_directory, system_file_path="..//supplementary//data")








.. GENERATED FROM PYTHON SOURCE LINES 66-67

We can grab the results for a single index or fiducial

.. GENERATED FROM PYTHON SOURCE LINES 67-69

.. code-block:: default

    results_1d = results_3d.inference_1d(index=0)








.. GENERATED FROM PYTHON SOURCE LINES 70-73

.. code-block:: default

    results_1d.plot()

    plt.show()



.. image-sg:: /examples/Inference/images/sphx_glr_plot_inference_1d_skytem_002.png
   :alt: , Time Domain EM Data
   :srcset: /examples/Inference/images/sphx_glr_plot_inference_1d_skytem_002.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 2 minutes  42.600 seconds)


.. _sphx_glr_download_examples_Inference_plot_inference_1d_skytem.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_inference_1d_skytem.py <plot_inference_1d_skytem.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_inference_1d_skytem.ipynb <plot_inference_1d_skytem.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
