
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/Data/plot_pointcloud3d.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_Data_plot_pointcloud3d.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_Data_plot_pointcloud3d.py:


3D Point Cloud class
--------------------

The 3D Point Cloud class extracts and utilizes the [Point](Point%20Class.ipynb) Class

.. GENERATED FROM PYTHON SOURCE LINES 9-17

.. code-block:: default


    from geobipy import PointCloud3D
    from os.path import join
    import numpy as np
    import matplotlib.pyplot as plt

    nPoints = 10000








.. GENERATED FROM PYTHON SOURCE LINES 18-20

Create a quick test example using random points
$z=x(1-x)cos(4\pi x)sin(4\pi y^{2})^{2}$

.. GENERATED FROM PYTHON SOURCE LINES 20-26

.. code-block:: default

    x = -np.abs((2.0 * np.random.rand(nPoints)) - 1.0)
    y = -np.abs((2.0 * np.random.rand(nPoints)) - 1.0)
    z = x * (1.0 - x) * np.cos(np.pi * x) * np.sin(np.pi * y)

    PC3D = PointCloud3D(x=x, y=y, z=z)








.. GENERATED FROM PYTHON SOURCE LINES 27-28

Append pointclouds together

.. GENERATED FROM PYTHON SOURCE LINES 28-35

.. code-block:: default

    x = np.abs((2.0 * np.random.rand(nPoints)) - 1.0)
    y = np.abs((2.0 * np.random.rand(nPoints)) - 1.0)
    z = x * (1.0 - x) * np.cos(np.pi * x) * np.sin(np.pi * y)

    Other_PC = PointCloud3D(x=x, y=y, z=z)
    PC3D.append(Other_PC)








.. GENERATED FROM PYTHON SOURCE LINES 36-37

Write a summary of the contents of the point cloud

.. GENERATED FROM PYTHON SOURCE LINES 37-40

.. code-block:: default


    print(PC3D.summary)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    3D Point Cloud: 
    Number of Points: : 20000 
     Name: Easting (m)
        Shape: (20000,)
        Values: [-0.64263608 -0.54642656 -0.09323637 ...  0.17391866  0.75171213
      0.47926272]
     Name: Northing (m)
        Shape: (20000,)
        Values: [-0.88984315 -0.4562167  -0.30552678 ...  0.59702768  0.2083271
      0.40165836]
     Name: Height (m)
        Shape: (20000,)
        Values: [-0.15513534 -0.12165086  0.07993432 ...  0.11709505 -0.08077028
      0.01547824]
     Name: Elevation (m)
        Shape: (20000,)
        Values: [0. 0. 0. ... 0. 0. 0.]





.. GENERATED FROM PYTHON SOURCE LINES 41-42

Get a single location from the point as a 3x1 vector

.. GENERATED FROM PYTHON SOURCE LINES 42-47

.. code-block:: default


    Point=PC3D.getPoint(50)
    # Print the point to the screen
    print(Point)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    <geobipy.src.classes.pointcloud.Point.Point object at 0x18338d400>




.. GENERATED FROM PYTHON SOURCE LINES 48-49

Plot the locations with Height as colour

.. GENERATED FROM PYTHON SOURCE LINES 49-53

.. code-block:: default


    plt.figure()
    PC3D.scatter2D(edgecolor='k')




.. image:: /examples/Data/images/sphx_glr_plot_pointcloud3d_001.png
    :alt: plot pointcloud3d
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    (<AxesSubplot:xlabel='Easting (m)', ylabel='Northing (m)'>, <matplotlib.collections.PathCollection object at 0x18344e640>, <matplotlib.colorbar.Colorbar object at 0x18346ab20>)



.. GENERATED FROM PYTHON SOURCE LINES 54-57

Plotting routines take matplotlib arguments for customization

For example, plotting the size of the points according to the absolute value of height

.. GENERATED FROM PYTHON SOURCE LINES 57-60

.. code-block:: default

    plt.figure()
    ax = PC3D.scatter2D(s=100*np.abs(PC3D.z), edgecolor='k')




.. image:: /examples/Data/images/sphx_glr_plot_pointcloud3d_002.png
    :alt: plot pointcloud3d
    :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 61-62

Interpolate the points to a 2D rectilinear mesh

.. GENERATED FROM PYTHON SOURCE LINES 62-67

.. code-block:: default

    mesh, dum = PC3D.interpolate(0.01, 0.01, method='mc', mask=0.03)

    # We can save that mesh to VTK
    mesh.to_vtk('pointcloud_interpolated.vtk')





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    surface [WARNING]: 7316 unusable points were supplied; these will be ignored.
    surface [WARNING]: You should have pre-processed the data with block-mean, -median, or -mode.
    surface [WARNING]: Check that previous processing steps write results with enough decimals.
    surface [WARNING]: Possibly some data were half-way between nodes and subject to IEEE 754 rounding.
    /Users/nfoks/miniconda3/envs/geobipy/lib/python3.9/site-packages/pyvista/core/dataset.py:1332: PyvistaDeprecationWarning: Use of `cell_arrays` is deprecated. Use `cell_data` instead.
      warnings.warn(




.. GENERATED FROM PYTHON SOURCE LINES 68-69

Grid the points using a triangulated CloughTocher, or minimum curvature interpolation

.. GENERATED FROM PYTHON SOURCE LINES 69-80

.. code-block:: default


    plt.figure()
    plt.subplot(321)
    PC3D.mapPlot(dx=0.01, dy=0.01, method='ct')
    plt.subplot(322)
    PC3D.mapPlot(dx=0.01, dy=0.01, method='mc')

    plt.subplot(323)
    PC3D.mapPlot(dx=0.01, dy=0.01, method='ct', mask=0.03)
    plt.subplot(324)
    PC3D.mapPlot(dx=0.01, dy=0.01, method='mc', mask=0.03)



.. image:: /examples/Data/images/sphx_glr_plot_pointcloud3d_003.png
    :alt: plot pointcloud3d
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    surface [WARNING]: 7316 unusable points were supplied; these will be ignored.
    surface [WARNING]: You should have pre-processed the data with block-mean, -median, or -mode.
    surface [WARNING]: Check that previous processing steps write results with enough decimals.
    surface [WARNING]: Possibly some data were half-way between nodes and subject to IEEE 754 rounding.
    surface [WARNING]: 7316 unusable points were supplied; these will be ignored.
    surface [WARNING]: You should have pre-processed the data with block-mean, -median, or -mode.
    surface [WARNING]: Check that previous processing steps write results with enough decimals.
    surface [WARNING]: Possibly some data were half-way between nodes and subject to IEEE 754 rounding.

    (<AxesSubplot:>, <matplotlib.collections.QuadMesh object at 0x1842f65b0>, <matplotlib.colorbar.Colorbar object at 0x1842f6fd0>)



.. GENERATED FROM PYTHON SOURCE LINES 81-82

For lots of points, these surfaces can look noisy. Using a block filter will help

.. GENERATED FROM PYTHON SOURCE LINES 82-89

.. code-block:: default

    PCsub = PC3D.block_median(0.005, 0.005)
    plt.subplot(325)
    PCsub.mapPlot(dx=0.01, dy=0.01, method='ct', mask=0.03)
    plt.subplot(326)
    PCsub.mapPlot(dx=0.01, dy=0.01, method='mc', mask=0.03)





.. image:: /examples/Data/images/sphx_glr_plot_pointcloud3d_004.png
    :alt: plot pointcloud3d
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    surface [WARNING]: 5677 unusable points were supplied; these will be ignored.
    surface [WARNING]: You should have pre-processed the data with block-mean, -median, or -mode.
    surface [WARNING]: Check that previous processing steps write results with enough decimals.
    surface [WARNING]: Possibly some data were half-way between nodes and subject to IEEE 754 rounding.

    (<AxesSubplot:>, <matplotlib.collections.QuadMesh object at 0x18478f9a0>, <matplotlib.colorbar.Colorbar object at 0x1877a6cd0>)



.. GENERATED FROM PYTHON SOURCE LINES 90-91

We can perform spatial searches on the 3D point cloud

.. GENERATED FROM PYTHON SOURCE LINES 91-97

.. code-block:: default


    PC3D.setKdTree(nDims=2)
    p = PC3D.nearest((0.0,0.0), k=200, p=2, radius=0.3)
    print(p)






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    (array([0.00556869, 0.01084062, 0.01116949, ..., 0.10995598, 0.10996208,
           0.10996767]), array([11154,  8146, 11125, ..., 15438, 11691,   333]))




.. GENERATED FROM PYTHON SOURCE LINES 98-100

.nearest returns the distances and indices into the point cloud of the nearest points.
We can then obtain those points as another point cloud

.. GENERATED FROM PYTHON SOURCE LINES 100-112

.. code-block:: default


    pNear = PC3D[p[1]]
    plt.figure()
    ax1 = plt.subplot(1,2,1)
    pNear.scatter2D()
    plt.plot(0.0, 0.0, 'x')
    plt.subplot(1,2,2, sharex=ax1, sharey=ax1)
    ax, sc, cb = PC3D.scatter2D(edgecolor='k')
    searchRadius = plt.Circle((0.0, 0.0), 0.3, color='b', fill=False)
    ax.add_artist(searchRadius)
    plt.plot(0.0, 0.0, 'x')




.. image:: /examples/Data/images/sphx_glr_plot_pointcloud3d_005.png
    :alt: plot pointcloud3d
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    [<matplotlib.lines.Line2D object at 0x187a10940>]



.. GENERATED FROM PYTHON SOURCE LINES 113-114

Read in the xyz co-ordinates in columns 2,3,4 from a file. Skip 1 header line.

.. GENERATED FROM PYTHON SOURCE LINES 114-120

.. code-block:: default


    dataFolder = "..//supplementary//Data//"

    PC3D.read_csv(filename=dataFolder + 'Resolve1.txt')






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    <geobipy.src.classes.pointcloud.PointCloud3D.PointCloud3D object at 0x17d540190>



.. GENERATED FROM PYTHON SOURCE LINES 121-126

.. code-block:: default



    plt.figure()
    f = PC3D.scatter2D(s=10)




.. image:: /examples/Data/images/sphx_glr_plot_pointcloud3d_006.png
    :alt: plot pointcloud3d
    :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 127-131

Export the 3D Pointcloud to a VTK file.

In this case, I pass the height as point data so that the points are coloured
when opened in Paraview (or other software)

.. GENERATED FROM PYTHON SOURCE LINES 133-138

.. code-block:: default



    # PC3D.toVTK('testPoints', format='binary')

    plt.show()








.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  4.501 seconds)


.. _sphx_glr_download_examples_Data_plot_pointcloud3d.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_pointcloud3d.py <plot_pointcloud3d.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_pointcloud3d.ipynb <plot_pointcloud3d.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
