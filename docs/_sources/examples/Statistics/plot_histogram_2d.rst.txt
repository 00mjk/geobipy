
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/Statistics/plot_histogram_2d.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_Statistics_plot_histogram_2d.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_Statistics_plot_histogram_2d.py:


Histogram 2D
------------

This 2D histogram class allows efficient updating of histograms, plotting and
saving as HDF5.

.. GENERATED FROM PYTHON SOURCE LINES 11-18

.. code-block:: default

    import geobipy
    from geobipy import StatArray
    from geobipy import Histogram2D
    import matplotlib.pyplot as plt
    import numpy as np









.. GENERATED FROM PYTHON SOURCE LINES 19-20

Create some histogram bins in x and y

.. GENERATED FROM PYTHON SOURCE LINES 20-23

.. code-block:: default

    x = StatArray(np.linspace(-4.0, 4.0, 100), 'Variable 1')
    y = StatArray(np.linspace(-4.0, 4.0, 105), 'Variable 2')








.. GENERATED FROM PYTHON SOURCE LINES 24-25

Instantiate

.. GENERATED FROM PYTHON SOURCE LINES 25-28

.. code-block:: default

    H = Histogram2D(xEdges=x, yEdges=y)









.. GENERATED FROM PYTHON SOURCE LINES 29-30

Generate some random numbers

.. GENERATED FROM PYTHON SOURCE LINES 30-35

.. code-block:: default

    a = np.random.randn(1000000)
    b = np.random.randn(1000000)
    x = np.asarray([a, b])









.. GENERATED FROM PYTHON SOURCE LINES 36-37

Update the histogram counts

.. GENERATED FROM PYTHON SOURCE LINES 37-40

.. code-block:: default

    H.update(x)









.. GENERATED FROM PYTHON SOURCE LINES 41-46

.. code-block:: default

    plt.figure()
    plt.title("2D Histogram")
    _ = H.pcolor(cmap='gray_r')





.. image:: /examples/Statistics/images/sphx_glr_plot_histogram_2d_001.png
    :alt: 2D Histogram
    :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 47-48

Generate marginal histograms along an axis

.. GENERATED FROM PYTHON SOURCE LINES 48-52

.. code-block:: default

    h1 = H.marginalize(axis=0)
    h2 = H.marginalize(axis=1)









.. GENERATED FROM PYTHON SOURCE LINES 53-54

Note that the names of the variables are automatically displayed

.. GENERATED FROM PYTHON SOURCE LINES 54-62

.. code-block:: default

    plt.figure()
    plt.suptitle("Marginals along each axis")
    plt.subplot(121)
    h1.plot()
    plt.subplot(122)
    _ = h2.plot()





.. image:: /examples/Statistics/images/sphx_glr_plot_histogram_2d_002.png
    :alt: Marginals along each axis
    :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 63-65

Create a combination plot with marginal histograms.
sphinx_gallery_thumbnail_number = 3

.. GENERATED FROM PYTHON SOURCE LINES 65-69

.. code-block:: default

    plt.figure()
    _ = H.comboPlot(cmap='gray_r')





.. image:: /examples/Statistics/images/sphx_glr_plot_histogram_2d_003.png
    :alt: plot histogram 2d
    :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 70-71

We can overlay the histogram with its credible intervals

.. GENERATED FROM PYTHON SOURCE LINES 71-78

.. code-block:: default

    plt.figure()
    plt.title("90% credible intervals overlain")
    H.pcolor(cmap='gray_r')
    H.plotCredibleIntervals(axis=0, percent=95.0)
    _ = H.plotCredibleIntervals(axis=1, percent=95.0)





.. image:: /examples/Statistics/images/sphx_glr_plot_histogram_2d_004.png
    :alt: 90% credible intervals overlain
    :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 79-80

Take the mean or median estimates from the histogram

.. GENERATED FROM PYTHON SOURCE LINES 80-83

.. code-block:: default

    mean = H.mean()
    median = H.median()








.. GENERATED FROM PYTHON SOURCE LINES 84-101

.. code-block:: default

    plt.figure(figsize=(9.5, 5))
    plt.suptitle("Mean, median, and credible interval overlain")
    ax = plt.subplot(121)
    H.pcolor(cmap='gray_r', noColorbar=True)
    H.plotCredibleIntervals(axis=0)
    H.plotMedian()
    H.plotMean(color='y')
    plt.legend()

    plt.subplot(122, sharex=ax, sharey=ax)
    H.pcolor(cmap='gray_r', noColorbar=True)
    H.plotCredibleIntervals(axis=1)
    H.plotMedian(axis=1)
    H.plotMean(axis=1, color='y')
    plt.legend()





.. image:: /examples/Statistics/images/sphx_glr_plot_histogram_2d_005.png
    :alt: Mean, median, and credible interval overlain
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x15d07da60>



.. GENERATED FROM PYTHON SOURCE LINES 102-103

Get the range between credible intervals

.. GENERATED FROM PYTHON SOURCE LINES 103-106

.. code-block:: default

    H.credibleRange(percent=95.0)






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    StatArray([[-5.49494949],
               [-3.87878788],
               [-3.55555556],
               [-4.60606061],
               [-2.98989899],
               [-3.23232323],
               [-2.98989899],
               [-3.55555556],
               [-4.04040404],
               [-3.47474747],
               [-3.87878788],
               [-3.87878788],
               [-3.95959596],
               [-4.04040404],
               [-3.63636364],
               [-3.87878788],
               [-4.04040404],
               [-4.12121212],
               [-3.7979798 ],
               [-4.12121212],
               [-3.87878788],
               [-3.7979798 ],
               [-3.95959596],
               [-3.95959596],
               [-4.04040404],
               [-3.95959596],
               [-3.87878788],
               [-3.87878788],
               [-3.95959596],
               [-3.95959596],
               [-3.95959596],
               [-3.95959596],
               [-3.87878788],
               [-3.87878788],
               [-3.87878788],
               [-3.95959596],
               [-3.95959596],
               [-3.87878788],
               [-3.87878788],
               [-3.95959596],
               [-3.87878788],
               [-3.87878788],
               [-3.87878788],
               [-3.87878788],
               [-3.87878788],
               [-3.95959596],
               [-3.87878788],
               [-3.95959596],
               [-3.87878788],
               [-3.87878788],
               [-3.87878788],
               [-3.87878788],
               [-3.95959596],
               [-3.87878788],
               [-3.95959596],
               [-3.95959596],
               [-3.87878788],
               [-3.95959596],
               [-3.87878788],
               [-3.87878788],
               [-3.87878788],
               [-3.95959596],
               [-3.87878788],
               [-3.87878788],
               [-3.87878788],
               [-3.87878788],
               [-3.87878788],
               [-3.87878788],
               [-3.87878788],
               [-3.95959596],
               [-3.95959596],
               [-3.87878788],
               [-3.87878788],
               [-3.95959596],
               [-4.04040404],
               [-3.87878788],
               [-3.87878788],
               [-3.87878788],
               [-3.87878788],
               [-4.04040404],
               [-3.95959596],
               [-3.95959596],
               [-3.95959596],
               [-3.71717172],
               [-4.04040404],
               [-3.87878788],
               [-3.95959596],
               [-4.04040404],
               [-3.55555556],
               [-4.2020202 ],
               [-3.7979798 ],
               [-4.2020202 ],
               [-3.95959596],
               [-4.12121212],
               [-3.95959596],
               [-3.7979798 ],
               [-3.15151515],
               [-3.63636364],
               [-3.71717172],
               [-4.60606061],
               [-2.90909091],
               [-4.04040404],
               [-3.47474747],
               [-3.71717172]])



.. GENERATED FROM PYTHON SOURCE LINES 107-108

We can map the credible range to an opacity or transparency

.. GENERATED FROM PYTHON SOURCE LINES 108-120

.. code-block:: default

    H.opacity()
    H.transparency()


    import h5py
    with h5py.File('h2d.h5', 'w') as f:
        H.toHdf(f, 'h2d')

    with h5py.File('h2d.h5', 'r') as f:
        H1 = Histogram2D.fromHdf(f['h2d'])









.. GENERATED FROM PYTHON SOURCE LINES 121-132

.. code-block:: default

    plt.figure(figsize=(9.5, 5))
    ax = plt.subplot(121)
    H1 = H.intervalStatistic([-4.0, -2.0, 2.0, 4.0], statistic='mean', axis=0)
    H1.pcolor(cmap='gray_r', equalize=True, noColorbar=True)
    H1.plotCredibleIntervals(axis=0)
    plt.subplot(122, sharex=ax, sharey=ax)
    H1 = H.intervalStatistic([-4.0, -2.0, 2.0, 4.0], statistic='mean', axis=1)
    H1.pcolor(cmap='gray_r', equalize=True, noColorbar=True)
    H1.plotCredibleIntervals(axis=1)

    plt.show()



.. image:: /examples/Statistics/images/sphx_glr_plot_histogram_2d_006.png
    :alt: plot histogram 2d
    :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  1.949 seconds)


.. _sphx_glr_download_examples_Statistics_plot_histogram_2d.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_histogram_2d.py <plot_histogram_2d.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_histogram_2d.ipynb <plot_histogram_2d.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
