
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/Statistics/plot_StatArray.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_Statistics_plot_StatArray.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_Statistics_plot_StatArray.py:


StatArray Class
----------------

Extends the numpy ndarray class to add extra attributes such as names, and
units, and allows us to attach statistical descriptors of the array.
The direct extension to numpy maintains speed and functionality of numpy arrays.

.. GENERATED FROM PYTHON SOURCE LINES 11-21

.. code-block:: default

    from geobipy import StatArray
    from geobipy import Histogram1D
    import numpy as np
    import matplotlib.pyplot as plt
    import h5py
    from geobipy import hdfRead

    plt.style.use('seaborn-pastel')









.. GENERATED FROM PYTHON SOURCE LINES 22-25

Instantiating a new StatArray class
+++++++++++++++++++++++++++++++++++


.. GENERATED FROM PYTHON SOURCE LINES 25-51

.. code-block:: default


    # Integer
    test = StatArray(1, name='1')
    print(test.summary)
    test = StatArray(10, name='10')
    print(test.summary)
    # tuple/Shape
    test = StatArray((2, 10), name='(2, 10)')
    print(test.summary)

    # float
    test = StatArray(45.454, name='45.454')
    print(test.summary)
    test = StatArray(np.float64(45.454), name='45.454')
    print(test.summary)

    # complex
    # test = StatArray(np.complex(0.0, 1.0), name='complex(0, 1)')

    # array
    Density = StatArray(np.random.randn(1), name="Density", units="$\frac{g}{cc}$")
    print(Density.summary)

    # The StatArray can take any numpy function that returns an array as an input.
    # The name and units of the variable can be assigned to the StatArray.





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Name: 1
        Shape: (1,)
        Values: [0.]

    Name: 10
        Shape: (10,)
        Values: [0. 0. 0. ... 0. 0. 0.]

    Name: (2, 10)
        Shape: (2, 10)
        Values: [[0. 0. 0. ... 0. 0. 0.]
     [0. 0. 0. ... 0. 0. 0.]]

    Name: 45.454
        Shape: (1,)
        Values: [45.454]

    Name: 45.454
        Shape: (1,)
        Values: [45.454]

    Name: Density ($\frac{g}{cc}$)
        Shape: (1,)
        Values: [0.41548284]





.. GENERATED FROM PYTHON SOURCE LINES 52-72

Attaching Prior and Proposal Distributions to a StatArray
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++

The StatArray class has been built so that we may easily
attach not only names and units, but statistical distributions too.
We won't go into too much detail about the different distribution
classes here so check out the :ref:`Distribution Class` for a better description.

Two types of distributions can be attached to the StatArray.

* Prior Distribution
    The prior represents how the user believes the variable should
    behave from a statistical standpoint.
    The values of the variable can be evaluated against the attached prior,
    to determine how likely they are to have occured https://en.wikipedia.org/wiki/Prior_probability

* Proposal Distribution
    The proposal describes a probability distribution from which to
    sample when we wish to perturb the variable
    https://en.wikipedia.org/wiki/Metropolis%E2%80%93Hastings_algorithm

.. GENERATED FROM PYTHON SOURCE LINES 72-78

.. code-block:: default


    # Obtain an instantiation of a random number generator.
    # This is optional, but is an important consideration for parallel programming.
    prng = np.random.RandomState()
    Density.set_prior('Uniform', -2.0, 2.0, prng=prng)








.. GENERATED FROM PYTHON SOURCE LINES 79-80

We can also attach a proposal distribution

.. GENERATED FROM PYTHON SOURCE LINES 80-86

.. code-block:: default

    Density.setProposal('Normal', 0.0, 1.0, prng=prng)
    print(Density.summary)
    print("Class type of the prior: ",type(Density.prior))
    print("Class type of the proposal: ",type(Density.proposal))






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Name: Density ($\frac{g}{cc}$)
        Shape: (1,)
        Values: [0.41548284]
    Prior:
    Uniform Distribution: 
      Min: :-2.0
      Max: :2.0
    Proposal:
    Normal Distribution: 
        Mean: :0.0
    Variance: :1.0

    Class type of the prior:  <class 'geobipy.src.classes.statistics.UniformDistribution.Uniform'>
    Class type of the proposal:  <class 'geobipy.src.classes.statistics.NormalDistribution.Normal'>




.. GENERATED FROM PYTHON SOURCE LINES 87-90

The values in the variable can be evaluated against the prior.
In this case, we have 3 elements in the variable, and a univariate Normal for the prior.
Therefore each element is evaluated to get 3 probabilities, one for each element.

.. GENERATED FROM PYTHON SOURCE LINES 90-92

.. code-block:: default

    print(Density.probability(log=False))





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    0.25




.. GENERATED FROM PYTHON SOURCE LINES 93-94

The univariate proposal distribution can generate random samples from itself.

.. GENERATED FROM PYTHON SOURCE LINES 94-96

.. code-block:: default

    print(Density.propose())





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    -0.6422990486958783




.. GENERATED FROM PYTHON SOURCE LINES 97-99

From a sampling stand point we can either sample using only the proposal
Or we can only generate samples that simultaneously satisfy the prior.

.. GENERATED FROM PYTHON SOURCE LINES 99-101

.. code-block:: default

    print(Density.propose(relative=True))





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [0.0904766]




.. GENERATED FROM PYTHON SOURCE LINES 102-103

We can perturb the variable by drawing from the attached proposal distribution.

.. GENERATED FROM PYTHON SOURCE LINES 103-107

.. code-block:: default


    Density.perturb()
    print(Density.summary)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Name: Density ($\frac{g}{cc}$)
        Shape: (1,)
        Values: [0.71215311]
    Prior:
    Uniform Distribution: 
      Min: :-2.0
      Max: :2.0
    Proposal:
    Normal Distribution: 
        Mean: :0.0
    Variance: :1.0





.. GENERATED FROM PYTHON SOURCE LINES 108-113

Attaching a Histogram to capture the posterior distribution
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
The StatArray can perturb itself, evaluate its current probability given its priors
and a histogram can be attached to capture its posterior distribution.
As an example, lets create a Histogram class with bins generated from the prior.

.. GENERATED FROM PYTHON SOURCE LINES 113-116

.. code-block:: default

    bins = Density.prior.bins()
    post = Histogram1D(edges=bins)








.. GENERATED FROM PYTHON SOURCE LINES 117-118

Attach the histogram

.. GENERATED FROM PYTHON SOURCE LINES 118-120

.. code-block:: default

    Density.setPosterior(post)








.. GENERATED FROM PYTHON SOURCE LINES 121-122

In an iterative sense, we can propose and evaluate new values, and update the posterior

.. GENERATED FROM PYTHON SOURCE LINES 122-129

.. code-block:: default

    for i in range(1000):
        Density.perturb()
        p = Density.probability(log=False)

        if p > 0.0: # This is a simple example!
            Density.updatePosterior()








.. GENERATED FROM PYTHON SOURCE LINES 130-133

.. code-block:: default

    plt.figure()
    Density.summaryPlot()




.. image:: /examples/Statistics/images/sphx_glr_plot_StatArray_001.png
    :alt: Prior, Proposal, Posterior
    :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 134-138

Attach a multivariate normal distribution as the prior and proposal
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Attach the multivariate prior

.. GENERATED FROM PYTHON SOURCE LINES 138-144

.. code-block:: default


    mean = np.random.randn(Density.size)
    variance = np.ones(Density.size)
    Density.set_prior('MvNormal', mean, variance, prng=prng)









.. GENERATED FROM PYTHON SOURCE LINES 145-148

Since the prior is multivariate, the appropriate equations are used to
evaluate the probability for all elements in the StatArray.
This produces a single probability.

.. GENERATED FROM PYTHON SOURCE LINES 148-151

.. code-block:: default


    print(Density.probability(log=False))





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    0.3182504238263932




.. GENERATED FROM PYTHON SOURCE LINES 152-153

Attach the multivariate proposal

.. GENERATED FROM PYTHON SOURCE LINES 153-159

.. code-block:: default


    mean = np.random.randn(Density.size)
    variance = np.ones(Density.size)
    Density.setProposal('MvNormal', mean, variance, prng=prng)









.. GENERATED FROM PYTHON SOURCE LINES 160-161

Perturb the variables using the multivariate proposal.

.. GENERATED FROM PYTHON SOURCE LINES 161-166

.. code-block:: default


    Density.perturb()
    Density.summary






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    "Name: Density ($\\frac{g}{cc}$)\n    Shape: (1,)\n    Values: [0.60918535]\nPrior:\nMV Normal Distribution:\nMean:\n[0.35218746]\nVariance:\n[[1.]]\nProposal:\nMV Normal Distribution:\nMean:\n[-1.42758734]\nVariance:\n[[1.]]\nPosterior:\n<class 'geobipy.src.classes.statistics.Histogram1D.Histogram1D'>\nBins: \n<property object at 0x129affa40>Counts:\nName: Frequency\n    Shape: (100,)\n    Values: [3 2 3 ... 5 4 1]\nValues are logged to base None\nRelative to: [0.]"



.. GENERATED FROM PYTHON SOURCE LINES 167-178

Basic manipulation
++++++++++++++++++

The StatArray contains other functions to perform basic array manipulations

These routines essentially wrap around numpy functions,
but the result will have the same name and units,
and if any prior or proposal are set, those will be carried through too.

1D example
__________

.. GENERATED FROM PYTHON SOURCE LINES 178-182

.. code-block:: default


    x = StatArray(-np.cumsum(np.arange(10.0)))
    print(x)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [ -0.  -1.  -3. ... -28. -36. -45.]




.. GENERATED FROM PYTHON SOURCE LINES 183-188

.. code-block:: default



    print(x.insert(i=[0, 9], values=[999.0, 999.0]))






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [999.  -0.  -1. ... -36. 999. -45.]




.. GENERATED FROM PYTHON SOURCE LINES 189-194

.. code-block:: default



    print(x.prepend(999.0))






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [999.  -0.  -1. ... -28. -36. -45.]




.. GENERATED FROM PYTHON SOURCE LINES 195-200

.. code-block:: default



    print(x.prepend([998.0, 999.0]))






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [998. 999.  -0. ... -28. -36. -45.]




.. GENERATED FROM PYTHON SOURCE LINES 201-206

.. code-block:: default



    print(x.append([998.0, 999.0]))






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [ -0.  -1.  -3. ... -45. 998. 999.]




.. GENERATED FROM PYTHON SOURCE LINES 207-212

.. code-block:: default



    print(x.resize(14))






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [-0. -1. -3. ... -1. -3. -6.]




.. GENERATED FROM PYTHON SOURCE LINES 213-218

.. code-block:: default



    print(x.delete([5,8]))






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [ -0.  -1.  -3. ... -21. -28. -45.]




.. GENERATED FROM PYTHON SOURCE LINES 219-224

.. code-block:: default



    print(x.edges())






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [  0.5  -0.5  -2.  ... -32.  -40.5 -49.5]




.. GENERATED FROM PYTHON SOURCE LINES 225-230

.. code-block:: default



    print(x.internalEdges())






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [ -0.5  -2.   -4.5 ... -24.5 -32.  -40.5]




.. GENERATED FROM PYTHON SOURCE LINES 231-236

.. code-block:: default



    print(x.firstNonZero())






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    1




.. GENERATED FROM PYTHON SOURCE LINES 237-242

.. code-block:: default



    print(x.lastNonZero())






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    10




.. GENERATED FROM PYTHON SOURCE LINES 243-248

.. code-block:: default



    print(x.abs())






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [ 0.  1.  3. ... 28. 36. 45.]




.. GENERATED FROM PYTHON SOURCE LINES 249-251

2D example
__________

.. GENERATED FROM PYTHON SOURCE LINES 251-256

.. code-block:: default


    x = StatArray(np.asarray([[0, -2, 3],[3, 0, -1],[1, 2, 0]]))
    print(x)






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [[ 0 -2  3]
     [ 3  0 -1]
     [ 1  2  0]]




.. GENERATED FROM PYTHON SOURCE LINES 257-262

.. code-block:: default



    print(x.insert(i=0, values=4))






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [[ 4  4  4]
     [ 0 -2  3]
     [ 3  0 -1]
     [ 1  2  0]]




.. GENERATED FROM PYTHON SOURCE LINES 263-268

.. code-block:: default



    print(x.insert(i=[2, 3], values=5, axis=1))






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [[ 0 -2  5  3  5]
     [ 3  0  5 -1  5]
     [ 1  2  5  0  5]]




.. GENERATED FROM PYTHON SOURCE LINES 269-274

.. code-block:: default



    print(x.insert(i=2, values=[10, 11, 12], axis=1))






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [[ 0 -2 10  3]
     [ 3  0 11 -1]
     [ 1  2 12  0]]




.. GENERATED FROM PYTHON SOURCE LINES 275-280

.. code-block:: default



    print(x.prepend(999))






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [[999 999 999]
     [  0  -2   3]
     [  3   0  -1]
     [  1   2   0]]




.. GENERATED FROM PYTHON SOURCE LINES 281-286

.. code-block:: default



    print(x.prepend([999, 998, 997], axis=1))






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [[999   0  -2   3]
     [998   3   0  -1]
     [997   1   2   0]]




.. GENERATED FROM PYTHON SOURCE LINES 287-292

.. code-block:: default



    print(x.append([[999, 998, 997]]))






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [[  0  -2   3]
     [  3   0  -1]
     [  1   2   0]
     [999 998 997]]




.. GENERATED FROM PYTHON SOURCE LINES 293-298

.. code-block:: default



    print(x.resize([5,5]))






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [[ 0 -2  3  3  0]
     [-1  1  2  0  0]
     [-2  3  3  0 -1]
     [ 1  2  0  0 -2]
     [ 3  3  0 -1  1]]




.. GENERATED FROM PYTHON SOURCE LINES 299-304

.. code-block:: default



    print(x.delete(5))






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [ 0 -2  3 ...  1  2  0]




.. GENERATED FROM PYTHON SOURCE LINES 305-310

.. code-block:: default



    print(x.delete(2, axis=0))






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [[ 0 -2  3]
     [ 3  0 -1]]




.. GENERATED FROM PYTHON SOURCE LINES 311-316

.. code-block:: default



    print(x.firstNonZero(axis=0))






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [1 0 0]




.. GENERATED FROM PYTHON SOURCE LINES 317-322

.. code-block:: default



    print(x.lastNonZero(axis=0))






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [3 3 2]




.. GENERATED FROM PYTHON SOURCE LINES 323-328

.. code-block:: default



    print(x.firstNonZero(axis=1))






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [1 0 0]




.. GENERATED FROM PYTHON SOURCE LINES 329-334

.. code-block:: default



    print(x.lastNonZero(axis=1))






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [3 3 2]




.. GENERATED FROM PYTHON SOURCE LINES 335-340

.. code-block:: default



    print(x.abs())






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [[0 2 3]
     [3 0 1]
     [1 2 0]]




.. GENERATED FROM PYTHON SOURCE LINES 341-346

Plotting
++++++++

We can easily plot the StatArray with its built in plotting functions.
All plotting functions can take matplotlib keywords

.. GENERATED FROM PYTHON SOURCE LINES 346-354

.. code-block:: default


    # The simplest is to just plot the array

    Density = StatArray(np.random.randn(100),name="Density",units="$\frac{g}{cc}$")
    Time = StatArray(np.linspace(0, 100, Density.size), name='Time', units='s')
    Depth = StatArray(np.random.exponential(size=Density.size), name='Depth', units='m')









.. GENERATED FROM PYTHON SOURCE LINES 355-360

.. code-block:: default



    plt.figure()
    _ = Density.plot(linewidth=0.5, marker='x', markersize=1.0)




.. image:: /examples/Statistics/images/sphx_glr_plot_StatArray_002.png
    :alt: plot StatArray
    :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 361-362

We can quickly plot a bar graph.

.. GENERATED FROM PYTHON SOURCE LINES 362-367

.. code-block:: default


    plt.figure()
    _ = Density.bar()





.. image:: /examples/Statistics/images/sphx_glr_plot_StatArray_003.png
    :alt: Density
    :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 368-369

We can scatter the contents of the StatArray if it is 1D

.. GENERATED FROM PYTHON SOURCE LINES 369-374

.. code-block:: default


    plt.figure()
    _ = Density.scatter(alpha=0.7)





.. image:: /examples/Statistics/images/sphx_glr_plot_StatArray_004.png
    :alt: plot StatArray
    :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 375-382

Histogram Equalization
______________________

A neat trick with colourmaps is histogram equalization.
This approach forces all colours in the images to have an equal weight.
This distorts the colour bar, but can really highlight the lower and higher
ends of whatever you are plotting. Just add the equalize keyword!

.. GENERATED FROM PYTHON SOURCE LINES 382-387

.. code-block:: default


    plt.figure()
    _ = Density.scatter(alpha=0.7, equalize=True)





.. image:: /examples/Statistics/images/sphx_glr_plot_StatArray_005.png
    :alt: plot StatArray
    :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 388-391

Take the log base(x) of the data

We can also take the data to a log, log10, log2, or a custom number!

.. GENERATED FROM PYTHON SOURCE LINES 391-395

.. code-block:: default


    plt.figure()
    _ = Density.scatter(alpha=0.7,edgecolor='k',log='e') # could also use log='e', log=2, log=x) where x is the base you require




.. image:: /examples/Statistics/images/sphx_glr_plot_StatArray_006.png
    :alt: plot StatArray
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Values <= 0.0 have been masked before taking their log




.. GENERATED FROM PYTHON SOURCE LINES 396-399

X and Y axes

We can specify the x axis of the scatter plot.

.. GENERATED FROM PYTHON SOURCE LINES 399-405

.. code-block:: default



    plt.figure()
    _ = Density.scatter(x=Time, alpha=0.7, edgecolor='k')





.. image:: /examples/Statistics/images/sphx_glr_plot_StatArray_007.png
    :alt: plot StatArray
    :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 406-413

Notice that I never specified the y axis, so the y axis defaulted to the values in the StatArray.
In this case, any operations applied to the colours, are also applied to the y axis, e.g. log=10.
When I take the values of Density to log base 10, because I do not specify the y plotting locations, those locations are similarly affected.

I can however force the y co-ordinates by specifying it as input.
In the second subplot I explicitly plot distance on the y axis.
In the first subplot, the y axis is the same as the colourbar.

.. GENERATED FROM PYTHON SOURCE LINES 413-422

.. code-block:: default



    plt.figure()
    ax1 = plt.subplot(211)
    Density.scatter(x=Time, alpha=0.7, edgecolor='k', log=10)
    plt.subplot(212, sharex=ax1)
    _ = Density.scatter(x=Time, y=Depth, alpha=0.7, edgecolor='k', log=10)





.. image:: /examples/Statistics/images/sphx_glr_plot_StatArray_008.png
    :alt: plot StatArray
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Values <= 0.0 have been masked before taking their log
    Values <= 0.0 have been masked before taking their log




.. GENERATED FROM PYTHON SOURCE LINES 423-426

Point sizes

Since the plotting functions take matplotlib keywords, I can also specify the size of each points.

.. GENERATED FROM PYTHON SOURCE LINES 428-443

.. code-block:: default



    s = np.ceil(100*(np.abs(np.random.randn(Density.size))))
    plt.figure()
    plt.tight_layout()
    ax1 = plt.subplot(211)
    Density.scatter(x=Time, y=Depth, s=s, alpha=0.7,edgecolor='k', sizeLegend=2)
    plt.subplot(212, sharex=ax1)
    #Density.scatter(x=Time, y=Depth, s=s, alpha=0.7,edgecolor='k', sizeLegend=[1.0, 100, 200, 300])
    v = np.abs(Density)+1.0
    _ = Density.scatter(x=Time, y=Depth, s=s, alpha=0.7,edgecolor='k', sizeLegend=[1.0, 100, 200, 300], log=10)







.. image:: /examples/Statistics/images/sphx_glr_plot_StatArray_009.png
    :alt: plot StatArray
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Values <= 0.0 have been masked before taking their log




.. GENERATED FROM PYTHON SOURCE LINES 444-445

Of course we can still take the log, or equalize the colour histogram

.. GENERATED FROM PYTHON SOURCE LINES 445-450

.. code-block:: default


    plt.figure()
    _ = Density.scatter(x=Time, y=Depth, s=s, alpha=0.7,edgecolor='k',equalize=True,log=10)





.. image:: /examples/Statistics/images/sphx_glr_plot_StatArray_010.png
    :alt: plot StatArray
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Values <= 0.0 have been masked before taking their log




.. GENERATED FROM PYTHON SOURCE LINES 451-452

Typically pcolor only works with 2D arrays. The StatArray has a pcolor method that will pcolor a 1D array

.. GENERATED FROM PYTHON SOURCE LINES 452-464

.. code-block:: default


    plt.figure()
    plt.subplot(221)
    Density.pcolor()
    plt.subplot(222)
    Density.pcolor(y=Time)
    plt.subplot(223)
    Density.pcolor(y=Time, flip=True)
    plt.subplot(224)
    _ = Density.pcolor(y=Time, log=10, equalize=True)





.. image:: /examples/Statistics/images/sphx_glr_plot_StatArray_011.png
    :alt: plot StatArray
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Values <= 0.0 have been masked before taking their log




.. GENERATED FROM PYTHON SOURCE LINES 465-468

We can add grid lines, and add opacity to each element in the pcolor image

This is useful if the colour values need to be scaled by another variable e.g. variance.

.. GENERATED FROM PYTHON SOURCE LINES 468-478

.. code-block:: default



    plt.figure()
    plt.subplot(121)
    Density.pcolor(grid=True, cmap='jet')
    plt.subplot(122)
    a = np.linspace(1.0, 0.0, Density.size)
    _ = Density.pcolor(grid=True, alpha=a, cmap='jet')





.. image:: /examples/Statistics/images/sphx_glr_plot_StatArray_012.png
    :alt: plot StatArray
    :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 479-480

We can plot a histogram of the StatArray

.. GENERATED FROM PYTHON SOURCE LINES 480-485

.. code-block:: default


    plt.figure()
    _ = Density.hist(100)





.. image:: /examples/Statistics/images/sphx_glr_plot_StatArray_013.png
    :alt: plot StatArray
    :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 486-487

We can write the StatArray to a HDF5 file.  HDF5 files are binary files that can include compression.  They allow quick and easy access to parts of the file, and can also be written to and read from in parallel!

.. GENERATED FROM PYTHON SOURCE LINES 487-492

.. code-block:: default


    with h5py.File('1Dtest.h5','w') as f:
        Density.toHdf(f,'test')









.. GENERATED FROM PYTHON SOURCE LINES 493-495

We can then read the StatArray from the file
Here x is a new variable, that is read in from the hdf5 file we just wrote.

.. GENERATED FROM PYTHON SOURCE LINES 495-502

.. code-block:: default


    x = hdfRead.readKeyFromFiles('1Dtest.h5','/','test')
    print('x has the same values as Density? ',np.all(x == Density))
    x[2] = 5.0 # Change one of the values in x
    print('x has its own memory allocated (not a reference/pointer)? ', id(x) != id(Density))






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    x has the same values as Density?  True
    x has its own memory allocated (not a reference/pointer)?  True




.. GENERATED FROM PYTHON SOURCE LINES 503-504

We can also define a 2D array

.. GENERATED FROM PYTHON SOURCE LINES 504-509

.. code-block:: default


    Density = StatArray(np.random.randn(50,100),"Density","$\frac{g}{cc}$")
    Density.summary






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    'Name: Density ($\\frac{g}{cc}$)\n    Shape: (50, 100)\n    Values: [[-0.40623321  1.0201118   0.57482569 ... -0.09671177 -1.98902004\n   1.42747249]\n [-0.09155503  0.2648866  -1.2563997  ... -0.85586203 -0.10943409\n  -0.14616791]\n [ 0.75649116  0.11702007  0.35008631 ...  0.96042335 -1.89206668\n   0.5595371 ]\n ...\n [-1.05642731  0.55639445  0.7874665  ... -1.63949984 -1.14579709\n  -0.197091  ]\n [-0.67781223 -0.45293352 -1.18877941 ...  0.63315721 -1.87045174\n  -1.87940155]\n [-0.23370162 -0.54719268 -0.059334   ...  0.30065222  0.28343569\n   0.18839636]]\n'



.. GENERATED FROM PYTHON SOURCE LINES 510-513

The StatArray Class's functions work whether it is 1D or 2D

We can still do a histogram

.. GENERATED FROM PYTHON SOURCE LINES 513-518

.. code-block:: default


    plt.figure()
    _ = Density.hist()





.. image:: /examples/Statistics/images/sphx_glr_plot_StatArray_014.png
    :alt: plot StatArray
    :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 519-520

And we can use pcolor to plot the 2D array

.. GENERATED FROM PYTHON SOURCE LINES 520-525

.. code-block:: default


    plt.figure()
    _ = Density.pcolor()





.. image:: /examples/Statistics/images/sphx_glr_plot_StatArray_015.png
    :alt: plot StatArray
    :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 526-529

The StatArray comes with extra plotting options

Here we specify the x and y axes for the 2D array using two other 1D StatArrays

.. GENERATED FROM PYTHON SOURCE LINES 529-536

.. code-block:: default


    plt.figure()
    x = StatArray(np.arange(101),name='x Axis',units = 'mm')
    y = StatArray(np.arange(51),name='y Axis',units = 'elephants')
    _ = Density.pcolor(x=x, y=y)





.. image:: /examples/Statistics/images/sphx_glr_plot_StatArray_016.png
    :alt: plot StatArray
    :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 537-540

We can plot using a log10 scale, in this case, we have values that are less
than or equal to 0.0.  Plotting with the log option will by default mask any
of those values, and will let you know that it has done so!

.. GENERATED FROM PYTHON SOURCE LINES 540-545

.. code-block:: default


    plt.figure()
    _ = Density.pcolor(x=x,y=y,log=2)





.. image:: /examples/Statistics/images/sphx_glr_plot_StatArray_017.png
    :alt: plot StatArray
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Values <= 0.0 have been masked before taking their log




.. GENERATED FROM PYTHON SOURCE LINES 546-550

A neat trick with colourmaps is histogram equalization.
This approach forces all colours in the image to have an equal amount.
This distorts the colours, but can really highlight the lower and higher
ends of whatever you are plotting

.. GENERATED FROM PYTHON SOURCE LINES 550-555

.. code-block:: default


    plt.figure()
    _ = Density.pcolor(x=x, y=y, equalize=True)





.. image:: /examples/Statistics/images/sphx_glr_plot_StatArray_018.png
    :alt: plot StatArray
    :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 556-557

We can equalize the log10 plot too :)

.. GENERATED FROM PYTHON SOURCE LINES 557-562

.. code-block:: default


    plt.figure()
    _ = Density.pcolor(x=x,y=y,equalize=True, log=10)





.. image:: /examples/Statistics/images/sphx_glr_plot_StatArray_019.png
    :alt: plot StatArray
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Values <= 0.0 have been masked before taking their log




.. GENERATED FROM PYTHON SOURCE LINES 563-564

We can add opacity to each pixel in the image

.. GENERATED FROM PYTHON SOURCE LINES 564-568

.. code-block:: default


    a = StatArray(np.random.random(Density.shape), 'Opacity from 0.0 to 1.0')









.. GENERATED FROM PYTHON SOURCE LINES 569-580

.. code-block:: default



    plt.figure()
    ax1 = plt.subplot(131)
    ax = Density.pcolor(x=x, y=y, flipY=True, linewidth=0.1, noColorbar=True)
    plt.subplot(132, sharex=ax1, sharey=ax1)
    ax = Density.pcolor(x=x, y=y, alpha=a, flipY=True, linewidth=0.1, noColorbar=True)
    plt.subplot(133, sharex=ax1, sharey=ax1)
    _ = a.pcolor(x=x, y=y, flipY=True)





.. image:: /examples/Statistics/images/sphx_glr_plot_StatArray_020.png
    :alt: plot StatArray
    :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 581-582

If the array potentially has a lot of white space around the edges, we can trim the image

.. GENERATED FROM PYTHON SOURCE LINES 582-594

.. code-block:: default


    Density[:10, :] = 0.0
    Density[-10:, :] = 0.0
    Density[:, :10] = 0.0
    Density[:, -10:] = 0.0
    plt.figure()
    plt.subplot(121)
    Density.pcolor()
    plt.subplot(122)
    _ = Density.pcolor(trim=0.0)





.. image:: /examples/Statistics/images/sphx_glr_plot_StatArray_021.png
    :alt: plot StatArray
    :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 595-596

Create a stacked area plot of a 2D StatArray

.. GENERATED FROM PYTHON SOURCE LINES 596-606

.. code-block:: default


    A = StatArray(np.abs(np.random.randn(13,100)), name='Variable', units="units")
    x = StatArray(np.arange(100),name='x Axis',units = 'mm')
    plt.figure()
    ax1 = plt.subplot(211)
    A.stackedAreaPlot(x=x, axis=1)
    plt.subplot(212, sharex=ax1)
    _ = A.stackedAreaPlot(x=x, i=np.s_[[1,3,4],:], axis=1, labels=['a','b','c'])

    plt.show()



.. image:: /examples/Statistics/images/sphx_glr_plot_StatArray_022.png
    :alt: plot StatArray
    :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  4.362 seconds)


.. _sphx_glr_download_examples_Statistics_plot_StatArray.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_StatArray.py <plot_StatArray.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_StatArray.ipynb <plot_StatArray.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
