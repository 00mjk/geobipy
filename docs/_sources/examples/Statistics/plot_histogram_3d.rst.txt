
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/Statistics/plot_histogram_3d.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_Statistics_plot_histogram_3d.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_Statistics_plot_histogram_3d.py:


Histogram 3D
------------

This 3D histogram class allows efficient updating of histograms, plotting and
saving as HDF5.

.. GENERATED FROM PYTHON SOURCE LINES 11-18

.. code-block:: default

    import geobipy
    from geobipy import StatArray
    from geobipy import Histogram3D
    import matplotlib.pyplot as plt
    import numpy as np









.. GENERATED FROM PYTHON SOURCE LINES 19-20

Create some histogram bins in x and y

.. GENERATED FROM PYTHON SOURCE LINES 20-24

.. code-block:: default

    x = StatArray(np.linspace(-4.0, 4.0, 11), 'Variable 1')
    y = StatArray(np.linspace(-4.0, 4.0, 21), 'Variable 2')
    z = StatArray(np.linspace(-4.0, 4.0, 31), 'Variable 3')








.. GENERATED FROM PYTHON SOURCE LINES 25-26

Instantiate

.. GENERATED FROM PYTHON SOURCE LINES 26-29

.. code-block:: default

    H = Histogram3D(xEdges=x, yEdges=y, zEdges=z)






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    <geobipy.src.classes.mesh.RectilinearMesh2D.RectilinearMesh2D object at 0x1122ba070>




.. GENERATED FROM PYTHON SOURCE LINES 30-31

Generate some random numbers

.. GENERATED FROM PYTHON SOURCE LINES 31-37

.. code-block:: default

    a = np.random.randn(100000)
    b = np.random.randn(100000)
    c = np.random.randn(100000)
    x = np.asarray([a, b, c])









.. GENERATED FROM PYTHON SOURCE LINES 38-39

Update the histogram counts

.. GENERATED FROM PYTHON SOURCE LINES 39-47

.. code-block:: default

    H.update(x)


    # ################################################################################
    # plt.figure()
    # _ = H.pcolor(cmap='gray_r')









.. GENERATED FROM PYTHON SOURCE LINES 48-49

Generate marginal histograms along an axis

.. GENERATED FROM PYTHON SOURCE LINES 49-137

.. code-block:: default

    plt.figure()
    plt.suptitle("Marginals along each axis")
    for axis in range(3):
        plt.subplot(1, 3, axis+1)
        _ = H.marginalize(axis=axis).plot()


    # ################################################################################
    # # Take the mean estimate from the histogram
    # plt.figure()
    # plt.suptitle("Mean along each axis")
    # for axis in range(3):
    #     plt.subplot(1, 3, axis+1)
    #     _ = H.mean(axis=axis).pcolor()

    # ################################################################################
    # # Take the median estimate from the histogram
    # plt.figure()
    # plt.suptitle("Median along each axis")
    # for axis in range(3):
    #     plt.subplot(1, 3, axis+1)
    #     _ = H.median(axis=axis).pcolor()

    # ################################################################################
    # # We can overlay the histogram with its credible intervals
    # plt.figure()
    # H.pcolor(cmap='gray_r')
    # H.plotCredibleIntervals(axis=0, percent=95.0)
    # _ = H.plotCredibleIntervals(axis=1, percent=95.0)


    # ################################################################################
    # # Take the mean or median estimates from the histogram
    # mean = H.mean()
    # median = H.median()


    # ################################################################################
    # # Or plot the mean and median
    # plt.figure()
    # H.pcolor(cmap='gray_r')
    # H.plotMean()
    # H.plotMedian()
    # plt.legend()

    # ################################################################################
    # plt.figure(figsize=(9.5, 5))
    # ax = plt.subplot(121)
    # H.pcolor(cmap='gray_r', noColorbar=True)
    # H.plotCredibleIntervals(axis=0)
    # H.plotMedian()
    # H.plotMean(color='y')

    # plt.subplot(122, sharex=ax, sharey=ax)
    # H.pcolor(cmap='gray_r', noColorbar=True)
    # H.plotCredibleIntervals(axis=1)
    # H.plotMedian(axis=1)
    # H.plotMean(axis=1, color='y')


    # ################################################################################
    # plt.figure(figsize=(9.5, 5))
    # ax = plt.subplot(121)
    # H1 = H.intervalStatistic([-4.0, -2.0, 2.0, 4.0], statistic='mean', axis=0)
    # H1.pcolor(cmap='gray_r', equalize=True, noColorbar=True)
    # H1.plotCredibleIntervals(axis=0)
    # plt.subplot(122, sharex=ax, sharey=ax)
    # H1 = H.intervalStatistic([-4.0, -2.0, 2.0, 4.0], statistic='mean', axis=1)
    # H1.pcolor(cmap='gray_r', equalize=True, noColorbar=True)
    # H1.plotCredibleIntervals(axis=1)


    # ################################################################################
    # # Get the range between credible intervals
    # H.credibleRange(percent=95.0)


    # ################################################################################
    # # We can map the credible range to an opacity or transparency
    # H.opacity()
    # H.transparency()

    plt.show()

    # ################################################################################
    # # We can plot the mesh in 3D!
    # pv_mesh  = H.plot_pyvista(linewidth=0.5)
    # pv_mesh.plot(show_edges=True, show_grid=True)



.. image:: /examples/Statistics/images/sphx_glr_plot_histogram_3d_001.png
    :alt: Marginals along each axis
    :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  1.478 seconds)


.. _sphx_glr_download_examples_Statistics_plot_histogram_3d.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_histogram_3d.py <plot_histogram_3d.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_histogram_3d.ipynb <plot_histogram_3d.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
