.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_examples_Statistics_plot_histogram_1d.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_Statistics_plot_histogram_1d.py:


Histogram 1D
------------

This histogram class allows efficient updating of histograms, plotting and
saving as HDF5


.. code-block:: default

    import h5py
    from geobipy import hdfRead
    from geobipy import StatArray
    from geobipy import Histogram1D
    import numpy as np
    import matplotlib.pyplot as plt


Histogram with regular bins
+++++++++++++++++++++++++++


.. code-block:: default


    # Create regularly spaced bins
    bins = StatArray(np.linspace(-3, 3, 101), 'Regular bins')



.. code-block:: default


    # Set the histogram using the bins, and update
    H = Histogram1D(bins = bins)



.. code-block:: default


    # We can update the histogram with some new values
    x = np.random.randn(1000)
    H.update(x, clip=True, trim=True)

    # Plot the histogram
    plt.figure()
    _ = H.plot()


Get the median, and 95% confidence values


.. code-block:: default

    print(H.credibleIntervals(percent=95.0))



.. code-block:: default


    # We can write the histogram to a HDF file
    with h5py.File('Histogram.h5','w') as hf:
        H.toHdf(hf,'Histogram')



.. code-block:: default


    # And read it back in from Hdf5
    H1 = hdfRead.readKeyFromFiles('Histogram.h5','/','Histogram')

    plt.figure()
    _ = H1.plot()



Histogram with irregular bins
+++++++++++++++++++++++++++++


.. code-block:: default


    # Create irregularly spaced bins
    x = np.cumsum(np.arange(10))
    irregularBins = np.hstack([-x[::-1], x[1:]]) 



Create a named StatArray


.. code-block:: default

    edges = StatArray(irregularBins, 'irregular bins')



Instantiate the histogram with bin edges


.. code-block:: default

    H = Histogram1D(bins=edges)



Generate random numbers


.. code-block:: default

    x = (np.random.randn(10000)*20.0) - 10.0



Update the histogram


.. code-block:: default

    H.update(x)




.. code-block:: default

    plt.figure()
    _ = H.plot()



We can plot the histogram as a pcolor plot
.


.. code-block:: default

    plt.figure()
    _ = H.pcolor(grid=True, transpose=True)



Histogram with linear space entries that are logged internally
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Create some bins spaced logarithmically


.. code-block:: default

    positiveBins = StatArray(np.logspace(-5, 3), 'positive bins')



.. code-block:: default

    print(positiveBins)


Instantiate the Histogram with log=10


.. code-block:: default

    H = Histogram1D(bins=positiveBins, log=10)


Generate random 10**x numbers


.. code-block:: default

    x = 10.0**(np.random.randn(1000)*2.0)


The update takes in the numbers in linear space and takes their log=10


.. code-block:: default

    H.update(x, trim=True)



.. code-block:: default

    plt.figure()
    _ = H.plot()


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.000 seconds)


.. _sphx_glr_download_examples_Statistics_plot_histogram_1d.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: plot_histogram_1d.py <plot_histogram_1d.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: plot_histogram_1d.ipynb <plot_histogram_1d.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
