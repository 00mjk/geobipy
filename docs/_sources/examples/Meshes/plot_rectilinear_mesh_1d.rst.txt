
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/Meshes/plot_rectilinear_mesh_1d.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_Meshes_plot_rectilinear_mesh_1d.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_Meshes_plot_rectilinear_mesh_1d.py:


1D Rectilinear Mesh
-------------------

.. GENERATED FROM PYTHON SOURCE LINES 6-11

.. code-block:: default

    from geobipy import StatArray
    from geobipy import RectilinearMesh1D
    import matplotlib.pyplot as plt
    import numpy as np








.. GENERATED FROM PYTHON SOURCE LINES 12-15

The basics
++++++++++
Instantiate a new 1D rectilinear mesh by specifying cell centres, edges, or widths.

.. GENERATED FROM PYTHON SOURCE LINES 15-17

.. code-block:: default

    x = StatArray(np.cumsum(np.arange(0.0, 10.0)), 'Depth', 'm')








.. GENERATED FROM PYTHON SOURCE LINES 18-19

Cell widths

.. GENERATED FROM PYTHON SOURCE LINES 19-21

.. code-block:: default

    rm = RectilinearMesh1D(widths=np.full(10, fill_value=50.0))








.. GENERATED FROM PYTHON SOURCE LINES 22-23

Cell centres

.. GENERATED FROM PYTHON SOURCE LINES 23-25

.. code-block:: default

    rm = RectilinearMesh1D(centres=x)








.. GENERATED FROM PYTHON SOURCE LINES 26-27

Cell edges

.. GENERATED FROM PYTHON SOURCE LINES 27-29

.. code-block:: default

    rm = RectilinearMesh1D(edges=x)








.. GENERATED FROM PYTHON SOURCE LINES 30-31

Cell centres

.. GENERATED FROM PYTHON SOURCE LINES 31-33

.. code-block:: default

    print(rm.centres)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [ 0.5  2.   4.5 ... 24.5 32.  40.5]




.. GENERATED FROM PYTHON SOURCE LINES 34-35

Cell edges

.. GENERATED FROM PYTHON SOURCE LINES 35-37

.. code-block:: default

    print(rm.edges)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [ 0.  1.  3. ... 28. 36. 45.]




.. GENERATED FROM PYTHON SOURCE LINES 38-39

Cell edges witout outermost edges

.. GENERATED FROM PYTHON SOURCE LINES 39-41

.. code-block:: default

    print(rm.internaledges)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [ 1.  3.  6. ... 21. 28. 36.]




.. GENERATED FROM PYTHON SOURCE LINES 42-43

Cell widths

.. GENERATED FROM PYTHON SOURCE LINES 43-45

.. code-block:: default

    print(rm.widths)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [1. 2. 3. ... 7. 8. 9.]




.. GENERATED FROM PYTHON SOURCE LINES 46-47

Get the cell indices

.. GENERATED FROM PYTHON SOURCE LINES 47-49

.. code-block:: default

    print(rm.cellIndex(np.r_[1.0, 5.0, 20.0]))





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [1 2 5]




.. GENERATED FROM PYTHON SOURCE LINES 50-51

We can plot the grid of the mesh

.. GENERATED FROM PYTHON SOURCE LINES 51-54

.. code-block:: default

    plt.figure()
    _ = rm.plotGrid(flip=True)




.. image-sg:: /examples/Meshes/images/sphx_glr_plot_rectilinear_mesh_1d_001.png
   :alt: plot rectilinear mesh 1d
   :srcset: /examples/Meshes/images/sphx_glr_plot_rectilinear_mesh_1d_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 55-56

Or Pcolor the mesh showing. An array of cell values is used as the colour.

.. GENERATED FROM PYTHON SOURCE LINES 56-60

.. code-block:: default

    plt.figure()
    arr = StatArray(np.random.randn(rm.nCells.value), "Name", "Units")
    _ = rm.pcolor(arr, grid=True, flip=True)




.. image-sg:: /examples/Meshes/images/sphx_glr_plot_rectilinear_mesh_1d_002.png
   :alt: plot rectilinear mesh 1d
   :srcset: /examples/Meshes/images/sphx_glr_plot_rectilinear_mesh_1d_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 61-62

Mask the mesh cells by a distance

.. GENERATED FROM PYTHON SOURCE LINES 62-68

.. code-block:: default

    rm_masked, indices, arr2 = rm.mask_cells(2.0, values=arr)
    plt.figure()
    _ = rm_masked.pcolor(StatArray(arr2), grid=True, flip=True)






.. image-sg:: /examples/Meshes/images/sphx_glr_plot_rectilinear_mesh_1d_003.png
   :alt: plot rectilinear mesh 1d
   :srcset: /examples/Meshes/images/sphx_glr_plot_rectilinear_mesh_1d_003.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 69-73

Log-space rectilinear mesh
++++++++++++++++++++++++++
Instantiate a new 1D rectilinear mesh by specifying cell centres or edges.
Here we use edges

.. GENERATED FROM PYTHON SOURCE LINES 73-75

.. code-block:: default

    x = StatArray(np.logspace(-3, 3, 10), 'Depth', 'm')








.. GENERATED FROM PYTHON SOURCE LINES 76-78

.. code-block:: default

    rm = RectilinearMesh1D(edges=x, log=10)








.. GENERATED FROM PYTHON SOURCE LINES 79-80

We can plot the grid of the mesh

.. GENERATED FROM PYTHON SOURCE LINES 80-84

.. code-block:: default

    plt.figure()
    _ = rm.plotGrid(flip=True)





.. image-sg:: /examples/Meshes/images/sphx_glr_plot_rectilinear_mesh_1d_004.png
   :alt: plot rectilinear mesh 1d
   :srcset: /examples/Meshes/images/sphx_glr_plot_rectilinear_mesh_1d_004.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 85-86

Or Pcolor the mesh showing. An array of cell values is used as the colour.

.. GENERATED FROM PYTHON SOURCE LINES 86-107

.. code-block:: default

    plt.figure()
    arr = StatArray(np.random.randn(rm.nCells.value), "Name", "Units")
    _ = rm.pcolor(arr, grid=True, flip=True)

    # Writing and reading to/from HDF5
    # ++++++++++++++++++++++++++++++++

    import h5py
    with h5py.File('rm1d.h5', 'w') as f:
        rm.toHdf(f, 'rm1d')

    with h5py.File('rm1d.h5', 'r') as f:
        rm1 = RectilinearMesh1D.fromHdf(f['rm1d'])


    # Making a mesh perturbable
    # +++++++++++++++++++++++++
    n_cells = 2
    widths = StatArray(np.full(n_cells, fill_value=10.0), 'test')
    rm = RectilinearMesh1D(widths=widths)




.. image-sg:: /examples/Meshes/images/sphx_glr_plot_rectilinear_mesh_1d_005.png
   :alt: plot rectilinear mesh 1d
   :srcset: /examples/Meshes/images/sphx_glr_plot_rectilinear_mesh_1d_005.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 108-115

Randomness and Model Perturbations
++++++++++++++++++++++++++++++++++
We can set the priors on the 1D model by assigning minimum and maximum layer
depths and a maximum number of layers.  These are used to create priors on
the number of cells in the model, a new depth interface, new parameter values
and the vertical gradient of those parameters.
The halfSpaceValue is used as a reference value for the parameter prior.

.. GENERATED FROM PYTHON SOURCE LINES 115-122

.. code-block:: default

    prng = np.random.RandomState()
    # Set the priors
    rm.set_priors(min_edge = 1.0,
                  max_edge = 150.0,
                  max_cells = 30,
                  prng = prng)








.. GENERATED FROM PYTHON SOURCE LINES 123-124

We can evaluate the prior of the model using depths only

.. GENERATED FROM PYTHON SOURCE LINES 124-126

.. code-block:: default

    print('Log probability of the Mesh given its priors: ', rm.priorProbability(log=True))





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Log probability of the Mesh given its priors:  -13.358381323561012




.. GENERATED FROM PYTHON SOURCE LINES 127-130

To propose new meshes, we specify the probabilities of creating, removing, perturbing, and not changing
an edge interface
Here we force the creation of a layer.

.. GENERATED FROM PYTHON SOURCE LINES 130-138

.. code-block:: default

    rm.set_proposals(probabilities = [0.25, 0.25, 0.25, 0.25], prng=prng)

    rm.set_posteriors()

    fig = plt.figure(figsize=(8,6))
    ax = plt.subplot(121)
    rm.plotGrid()




.. image-sg:: /examples/Meshes/images/sphx_glr_plot_rectilinear_mesh_1d_006.png
   :alt: plot rectilinear mesh 1d
   :srcset: /examples/Meshes/images/sphx_glr_plot_rectilinear_mesh_1d_006.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 139-140

We can then perturb the layers of the model

.. GENERATED FROM PYTHON SOURCE LINES 140-144

.. code-block:: default

    for i in range(1000):
        rm = rm.perturb()
        rm.update_posteriors()








.. GENERATED FROM PYTHON SOURCE LINES 145-162

.. code-block:: default

    ax = plt.subplot(122)
    rm.plotGrid()

    import matplotlib.gridspec as gridspec
    plt.figure()
    gs = gridspec.GridSpec(1, 1, figure=fig)
    ax = rm.init_posterior_plots(gs[0, 0])
    rm.plot_posteriors(axes=ax)

    import h5py
    with h5py.File('rm1d.h5', 'w') as f:
        rm.toHdf(f, 'rm1d', withPosterior = True)

    with h5py.File('rm1d.h5', 'r') as f:
        rm1 = RectilinearMesh1D.fromHdf(f['rm1d'])


    plt.show()


.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /examples/Meshes/images/sphx_glr_plot_rectilinear_mesh_1d_007.png
         :alt: plot rectilinear mesh 1d
         :srcset: /examples/Meshes/images/sphx_glr_plot_rectilinear_mesh_1d_007.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /examples/Meshes/images/sphx_glr_plot_rectilinear_mesh_1d_008.png
         :alt: plot rectilinear mesh 1d
         :srcset: /examples/Meshes/images/sphx_glr_plot_rectilinear_mesh_1d_008.png
         :class: sphx-glr-multi-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  1.385 seconds)


.. _sphx_glr_download_examples_Meshes_plot_rectilinear_mesh_1d.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_rectilinear_mesh_1d.py <plot_rectilinear_mesh_1d.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_rectilinear_mesh_1d.ipynb <plot_rectilinear_mesh_1d.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
