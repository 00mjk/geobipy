
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/Meshes/plot_rectilinear_mesh_2d.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_Meshes_plot_rectilinear_mesh_2d.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_Meshes_plot_rectilinear_mesh_2d.py:


2D Rectilinear Mesh
-------------------
This 2D rectilinear mesh defines a grid with straight cell boundaries.

It can be instantiated in two ways.

The first is by providing the cell centres or
cell edges in two dimensions.

The second embeds the 2D mesh in 3D by providing the cell centres or edges in three dimensions.
The first two dimensions specify the mesh coordinates in the horiztontal cartesian plane
while the third discretizes in depth. This allows us to characterize a mesh whose horizontal coordinates
do not follow a line that is parallel to either the "x" or "y" axis.

.. GENERATED FROM PYTHON SOURCE LINES 19-25

.. code-block:: default

    from geobipy import StatArray
    from geobipy import RectilinearMesh2D
    import matplotlib.pyplot as plt
    import numpy as np









.. GENERATED FROM PYTHON SOURCE LINES 26-27

Specify some cell centres in x and y

.. GENERATED FROM PYTHON SOURCE LINES 27-31

.. code-block:: default

    x = StatArray(np.arange(10.0), 'Easting', 'm')
    y = StatArray(np.arange(10.0), 'Northing', 'm')
    rm = RectilinearMesh2D(xCentres=x, yCentres=y)








.. GENERATED FROM PYTHON SOURCE LINES 32-33

We can plot the grid lines of the mesh.

.. GENERATED FROM PYTHON SOURCE LINES 33-36

.. code-block:: default

    plt.figure()
    _  = rm.plotGrid(linewidth=0.5)




.. image:: /examples/Meshes/images/sphx_glr_plot_rectilinear_mesh_2d_001.png
    :alt: plot rectilinear mesh 2d
    :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 37-38

Intersecting lines with a mesh

.. GENERATED FROM PYTHON SOURCE LINES 38-40

.. code-block:: default

    arr = np.zeros(rm.shape)








.. GENERATED FROM PYTHON SOURCE LINES 41-47

Intersecting multisegment lines with a mesh
arr = np.zeros(rm.shape)
ix, iy = rm.line_indices([0.0, 3.0, 6.0, 9], [2.0, 6.0, -10.0, 10])
arr[iy, ix] = 1
plt.figure()
rm.pcolor(values = arr)

.. GENERATED FROM PYTHON SOURCE LINES 49-51

2D Mesh embedded in 3D
++++++++++++++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 51-54

.. code-block:: default

    z = StatArray(np.cumsum(np.arange(15.0)), 'Depth', 'm')
    rm = RectilinearMesh2D(xCentres=x, yCentres=y, zCentres=z)








.. GENERATED FROM PYTHON SOURCE LINES 55-56

Plot the x-y coordinates of the mesh

.. GENERATED FROM PYTHON SOURCE LINES 56-59

.. code-block:: default

    plt.figure()
    _ = rm.plotXY()




.. image:: /examples/Meshes/images/sphx_glr_plot_rectilinear_mesh_2d_002.png
    :alt: plot rectilinear mesh 2d
    :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 60-61

Again, plot the grid. This time the z-coordinate dominates the plot.

.. GENERATED FROM PYTHON SOURCE LINES 61-64

.. code-block:: default

    plt.figure()
    _ = rm.plotGrid(xAxis='r', flipY=True, linewidth=0.5)




.. image:: /examples/Meshes/images/sphx_glr_plot_rectilinear_mesh_2d_003.png
    :alt: plot rectilinear mesh 2d
    :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 65-66

We can pcolor the mesh by providing cell values.

.. GENERATED FROM PYTHON SOURCE LINES 66-86

.. code-block:: default

    xx, yy = np.meshgrid(rm.x.centres, rm.z.centres)
    arr = StatArray(np.sin(np.sqrt(xx ** 2.0 + yy ** 2.0)), "Values")

    plt.figure()
    _ = rm.pcolor(arr, xAxis='r', grid=True, flipY=True, linewidth=0.5)

    xG = rm.xGradientMatrix()
    zG = rm.zGradientMatrix()

    # dax = StatArray((xG * arr.flatten()).reshape((arr.shape[0], arr.shape[1]-1)))
    # rm2 = rm[:, :9]

    # plt.figure()
    # rm2.pcolor(dax, xAxis='r', grid=True, flipY=True, linewidth=0.5)

    # dax = StatArray((zG * arr.flatten()).reshape((arr.shape[0]-1, arr.shape[1])))

    # plt.figure()
    # dax.pcolor(grid=True, flipY=True, linewidth=0.5)




.. image:: /examples/Meshes/images/sphx_glr_plot_rectilinear_mesh_2d_004.png
    :alt: plot rectilinear mesh 2d
    :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 87-88

Mask the x axis cells by a distance

.. GENERATED FROM PYTHON SOURCE LINES 88-92

.. code-block:: default

    rm_masked, x_indices, z_indices, arr2 = rm.mask_cells(xAxis='x', x_distance=0.4, values=arr)
    plt.figure()
    _ = rm_masked.pcolor(StatArray(arr2), grid=True, flipY=True)




.. image:: /examples/Meshes/images/sphx_glr_plot_rectilinear_mesh_2d_005.png
    :alt: plot rectilinear mesh 2d
    :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 93-94

Mask the z axis cells by a distance

.. GENERATED FROM PYTHON SOURCE LINES 94-98

.. code-block:: default

    rm_masked, x_indices, z_indices, arr2 = rm.mask_cells(xAxis='x', z_distance=4.9, values=arr)
    plt.figure()
    _ = rm_masked.pcolor(StatArray(arr2), grid=True, flipY=True)




.. image:: /examples/Meshes/images/sphx_glr_plot_rectilinear_mesh_2d_006.png
    :alt: plot rectilinear mesh 2d
    :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 99-100

Mask axes by a distance

.. GENERATED FROM PYTHON SOURCE LINES 100-104

.. code-block:: default

    rm_masked, x_indices, z_indices, arr2 = rm.mask_cells(xAxis='x', x_distance=0.4, z_distance=4.9, values=arr)
    plt.figure()
    _ = rm_masked.pcolor(StatArray(arr2), grid=True, flipY=True)




.. image:: /examples/Meshes/images/sphx_glr_plot_rectilinear_mesh_2d_007.png
    :alt: plot rectilinear mesh 2d
    :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 105-107

We can perform some interval statistics on the cell values of the mesh
Generate some values

.. GENERATED FROM PYTHON SOURCE LINES 107-109

.. code-block:: default

    a = np.repeat(np.arange(1.0, np.float64(rm.x.nCells+1))[:, np.newaxis], rm.z.nCells, 1).T








.. GENERATED FROM PYTHON SOURCE LINES 110-111

Compute the mean over an interval for the mesh.

.. GENERATED FROM PYTHON SOURCE LINES 111-113

.. code-block:: default

    rm.intervalStatistic(a, intervals=[6.8, 12.4], axis=0, statistic='mean')





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    (array([[ 1.,  2.,  3., ...,  8.,  9., 10.]]), [6.8, 12.4])



.. GENERATED FROM PYTHON SOURCE LINES 114-115

Compute the mean over multiple intervals for the mesh.

.. GENERATED FROM PYTHON SOURCE LINES 115-117

.. code-block:: default

    rm.intervalStatistic(a, intervals=[6.8, 12.4, 20.0, 40.0], axis=0, statistic='mean')





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    (array([[ 1.,  2.,  3., ...,  8.,  9., 10.]]), [6.8, 12.4])



.. GENERATED FROM PYTHON SOURCE LINES 118-119

We can specify either axis

.. GENERATED FROM PYTHON SOURCE LINES 119-121

.. code-block:: default

    rm.intervalStatistic(a, intervals=[2.8, 4.2], axis=1, statistic='mean')





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    (array([[4.5],
           [4.5],
           [4.5],
           ...,
           [4.5],
           [4.5],
           [4.5]]), [2.8, 4.2])



.. GENERATED FROM PYTHON SOURCE LINES 122-124

.. code-block:: default

    rm.intervalStatistic(a, intervals=[2.8, 4.2, 5.1, 8.4], axis=1, statistic='mean')





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    (array([[4.5, 6. , 8. ],
           [4.5, 6. , 8. ],
           [4.5, 6. , 8. ],
           ...,
           [4.5, 6. , 8. ],
           [4.5, 6. , 8. ],
           [4.5, 6. , 8. ]]), [2.8, 4.2, 5.1, 8.4])



.. GENERATED FROM PYTHON SOURCE LINES 125-126

Slice the 2D mesh to retrieve either a 2D mesh or 1D mesh

.. GENERATED FROM PYTHON SOURCE LINES 126-138

.. code-block:: default

    rm2 = rm[:5, :5]
    rm3 = rm[:, 5]
    rm4 = rm[5, :]

    plt.figure()
    plt.subplot(131)
    rm2.plotGrid()
    plt.subplot(132)
    rm3.plotGrid()
    plt.subplot(133)
    rm4.plotGrid()




.. image:: /examples/Meshes/images/sphx_glr_plot_rectilinear_mesh_2d_008.png
    :alt: plot rectilinear mesh 2d
    :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 139-140

Resample a grid

.. GENERATED FROM PYTHON SOURCE LINES 140-151

.. code-block:: default

    values = StatArray(np.random.randn(*rm.shape))
    rm2, values2 = rm.resample(0.5, 0.5, values)



    plt.figure()
    plt.subplot(121)
    rm.pcolor(values)
    plt.subplot(122)
    rm2.pcolor(values2)




.. image:: /examples/Meshes/images/sphx_glr_plot_rectilinear_mesh_2d_009.png
    :alt: plot rectilinear mesh 2d
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    (<AxesSubplot:xlabel='Easting (m)', ylabel='Depth (m)'>, <matplotlib.collections.QuadMesh object at 0x15cef6160>, <matplotlib.colorbar.Colorbar object at 0x15d88d2e0>)



.. GENERATED FROM PYTHON SOURCE LINES 152-154

Axes in log space
+++++++++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 154-158

.. code-block:: default

    x = StatArray(np.logspace(-1, 4, 10), 'x')
    y = StatArray(np.logspace(0, 3, 10), 'y')
    rm = RectilinearMesh2D(xEdges=x, xlog=10, yEdges=y, ylog=10)








.. GENERATED FROM PYTHON SOURCE LINES 159-160

We can plot the grid lines of the mesh.

.. GENERATED FROM PYTHON SOURCE LINES 160-163

.. code-block:: default

    plt.figure()
    _  = rm.plotGrid(linewidth=0.5)




.. image:: /examples/Meshes/images/sphx_glr_plot_rectilinear_mesh_2d_010.png
    :alt: plot rectilinear mesh 2d
    :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 164-165

Intersecting lines with a mesh

.. GENERATED FROM PYTHON SOURCE LINES 165-168

.. code-block:: default

    x = np.r_[0.1, 1000.0]
    y = np.r_[1.0, 1000.0]








.. GENERATED FROM PYTHON SOURCE LINES 169-175

Intersecting multisegment lines with a mesh
arr = np.zeros(rm.shape)
ix, iy = rm.line_indices([0.0, 3.0, 6.0, 9], [2.0, 6.0, -10.0, 10])
arr[iy, ix] = 1
plt.figure()
rm.pcolor(values = arr)

.. GENERATED FROM PYTHON SOURCE LINES 178-191

.. code-block:: default

    import h5py
    with h5py.File('rm2d.h5', 'w') as f:
        rm.toHdf(f, 'test')

    with h5py.File('rm2d.h5', 'r') as f:
        rm2 = RectilinearMesh2D.fromHdf(f['test'])

    values = StatArray(np.random.randn(*rm2.shape))

    plt.figure()
    rm2.pcolor(values)

    plt.show()



.. image:: /examples/Meshes/images/sphx_glr_plot_rectilinear_mesh_2d_011.png
    :alt: plot rectilinear mesh 2d
    :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  1.314 seconds)


.. _sphx_glr_download_examples_Meshes_plot_rectilinear_mesh_2d.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_rectilinear_mesh_2d.py <plot_rectilinear_mesh_2d.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_rectilinear_mesh_2d.ipynb <plot_rectilinear_mesh_2d.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
